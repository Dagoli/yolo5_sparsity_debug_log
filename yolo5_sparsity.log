Found permutation search CUDA kernels
[ASP][Info] permutation_search_kernels can be imported.
initialize network with normal type
Load weights logs/best_epoch_weights.pth.

Successful Load Key: ['backbone.stem.conv.conv.weight', 'backbone.stem.conv.bn.weight', 'backbone.stem.conv.bn.bias', 'backbone.stem.conv.bn.running_mean', 'backbone.stem.conv.bn.running_var', 'backbone.stem.conv.bn.num_batches_tracked', 'backbone.dark2.0.conv.weight', 'backbone.dark2.0.bn.weight', 'backbone.dark2.0.bn.bias', 'backbone.dark2.0.bn.running_mean', 'backbone.dark2.0.bn.running_var', 'backbone.dark2.0.bn.num_batches_tracked', 'backbone.dark2.1.cv1.conv.weight', 'backbone.dark2.1.cv1.bn.weight', 'backbone ‚Ä¶‚Ä¶
Successful Load Key Num: 360

Fail To Load Key: [] ‚Ä¶‚Ä¶
Fail To Load Key num: 0

[1;33;44mÊ∏©È¶®ÊèêÁ§∫ÔºåheadÈÉ®ÂàÜÊ≤°ÊúâËΩΩÂÖ•ÊòØÊ≠£Â∏∏Áé∞Ë±°ÔºåBackboneÈÉ®ÂàÜÊ≤°ÊúâËΩΩÂÖ•ÊòØÈîôËØØÁöÑ„ÄÇ[0m
Configurations:
----------------------------------------------------------------------
|                     keys |                                   values|
----------------------------------------------------------------------
|             classes_path |               model_data/voc_classes.txt|
|             anchors_path |              model_data/yolo_anchors.txt|
|             anchors_mask |        [[6, 7, 8], [3, 4, 5], [0, 1, 2]]|
|               model_path |              logs/best_epoch_weights.pth|
|              input_shape |                               [640, 640]|
|               Init_Epoch |                                        0|
|             Freeze_Epoch |                                        5|
|           UnFreeze_Epoch |                                       10|
|        Freeze_batch_size |                                       16|
|      Unfreeze_batch_size |                                        8|
|             Freeze_Train |                                     True|
|                  Init_lr |                                     0.01|
|                   Min_lr |                                   0.0001|
|           optimizer_type |                                      sgd|
|                 momentum |                                    0.937|
|            lr_decay_type |                                      cos|
|              save_period |                                       10|
|                 save_dir |                                     logs|
|              num_workers |                                        4|
|                num_train |                                     1996|
|                  num_val |                                      222|
----------------------------------------------------------------------

[1;33;44m[Warning] ‰ΩøÁî®sgd‰ºòÂåñÂô®Êó∂ÔºåÂª∫ËÆÆÂ∞ÜËÆ≠ÁªÉÊÄªÊ≠•ÈïøËÆæÁΩÆÂà∞50000‰ª•‰∏ä„ÄÇ[0m
[1;33;44m[Warning] Êú¨Ê¨°ËøêË°åÁöÑÊÄªËÆ≠ÁªÉÊï∞ÊçÆÈáè‰∏∫1996ÔºåUnfreeze_batch_size‰∏∫8ÔºåÂÖ±ËÆ≠ÁªÉ10‰∏™EpochÔºåËÆ°ÁÆóÂá∫ÊÄªËÆ≠ÁªÉÊ≠•Èïø‰∏∫2490„ÄÇ[0m
[1;33;44m[Warning] Áî±‰∫éÊÄªËÆ≠ÁªÉÊ≠•Èïø‰∏∫2490ÔºåÂ∞è‰∫éÂª∫ËÆÆÊÄªÊ≠•Èïø50000ÔºåÂª∫ËÆÆËÆæÁΩÆÊÄª‰∏ñ‰ª£‰∏∫201„ÄÇ[0m
[ASP] torchvision is imported, can work with the MaskRCNN/KeypointRCNN from torchvision.

[set_permutation_params_from_asp] Set permutation needed parameters

[set_identical_seed] Set the identical seed: 1 for all GPUs to make sure the same results generated in permutation search
[ASP] Auto skipping pruning yolo_head_P3::weight of size=torch.Size([75, 128, 1, 1]) and type=torch.float32 for sparsity
[ASP] Auto skipping pruning yolo_head_P4::weight of size=torch.Size([75, 256, 1, 1]) and type=torch.float32 for sparsity
[ASP] Auto skipping pruning yolo_head_P5::weight of size=torch.Size([75, 512, 1, 1]) and type=torch.float32 for sparsity

[build_offline_permutation_graph] Further refine the model graph built by Torch.FX for offline permutation
[build_fx_graph] The torch version is: 1.12.1+cu116, version major is: 1, version minor is: 12, version minimum is: 1+cu116
[build_fx_graph] The Torch.FX is supported.

[build_fx_graph] Print the model structure with pure PyTorch function
YoloBody(
  (backbone): CSPDarknet(
    (stem): Focus(
      (conv): Conv(
        (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
        (act): SiLU()
      )
    )
    (dark2): Sequential(
      (0): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
        (act): SiLU()
      )
      (1): C3(
        (cv1): Conv(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv3): Conv(
          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
        )
      )
    )
    (dark3): Sequential(
      (0): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
        (act): SiLU()
      )
      (1): C3(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv3): Conv(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
          (1): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
          (2): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
        )
      )
    )
    (dark4): Sequential(
      (0): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
        (act): SiLU()
      )
      (1): C3(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv3): Conv(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
          (1): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
          (2): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
        )
      )
    )
    (dark5): Sequential(
      (0): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
        (act): SiLU()
      )
      (1): SPP(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): ModuleList(
          (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
          (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
          (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
        )
      )
      (2): C3(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv3): Conv(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
            (cv2): Conv(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (act): SiLU()
            )
          )
        )
      )
    )
  )
  (upsample): Upsample(scale_factor=2.0, mode=nearest)
  (conv_for_feat3): Conv(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
    (act): SiLU()
  )
  (conv3_for_upsample1): C3(
    (cv1): Conv(
      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
  (conv_for_feat2): Conv(
    (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
    (act): SiLU()
  )
  (conv3_for_upsample2): C3(
    (cv1): Conv(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
  (down_sample1): Conv(
    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
    (act): SiLU()
  )
  (conv3_for_downsample1): C3(
    (cv1): Conv(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
  (down_sample2): Conv(
    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
    (act): SiLU()
  )
  (conv3_for_downsample2): C3(
    (cv1): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
  (yolo_head_P3): Conv2d(128, 75, kernel_size=(1, 1), stride=(1, 1))
  (yolo_head_P4): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
  (yolo_head_P5): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
)

[build_fx_graph] Build the module name and type dictionary
[build_fx_graph] module_name: , module type: <class 'nets.yolo.YoloBody'>
[build_fx_graph] module_name: backbone, module type: <class 'nets.CSPdarknet.CSPDarknet'>
[build_fx_graph] module_name: backbone.stem, module type: <class 'nets.CSPdarknet.Focus'>
[build_fx_graph] module_name: backbone.stem.conv, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.stem.conv.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.stem.conv.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.stem.conv.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark2.0, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.0.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.0.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.0.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2.1, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: backbone.dark2.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2.1.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.1.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.1.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.1.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2.1.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark2.1.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark2.1.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark3.0, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.0.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.0.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.0.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: backbone.dark3.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark3.1.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m.1, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m.2, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark3.1.m.2.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark4.0, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.0.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.0.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.0.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: backbone.dark4.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark4.1.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m.1, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m.2, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark4.1.m.2.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark5.0, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.0.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.0.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.0.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.1, module type: <class 'nets.CSPdarknet.SPP'>
[build_fx_graph] module_name: backbone.dark5.1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.1.m, module type: <class 'torch.nn.modules.container.ModuleList'>
[build_fx_graph] module_name: backbone.dark5.1.m.0, module type: <class 'torch.nn.modules.pooling.MaxPool2d'>
[build_fx_graph] module_name: backbone.dark5.1.m.1, module type: <class 'torch.nn.modules.pooling.MaxPool2d'>
[build_fx_graph] module_name: backbone.dark5.1.m.2, module type: <class 'torch.nn.modules.pooling.MaxPool2d'>
[build_fx_graph] module_name: backbone.dark5.2, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: backbone.dark5.2.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.2.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.2.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.2.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.2.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.2.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.2.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.2.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.2.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.2.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.2.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.2.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.2.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: backbone.dark5.2.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: backbone.dark5.2.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: upsample, module type: <class 'torch.nn.modules.upsampling.Upsample'>
[build_fx_graph] module_name: conv_for_feat3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv_for_feat3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv_for_feat3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv_for_feat3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample1, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: conv3_for_upsample1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample1.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample1.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample1.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample1.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample1.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample1.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv_for_feat2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv_for_feat2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv_for_feat2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv_for_feat2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample2, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: conv3_for_upsample2.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample2.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample2.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample2.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample2.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample2.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample2.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample2.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample2.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample2.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample2.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample2.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample2.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_upsample2.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: down_sample1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: down_sample1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: down_sample1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: down_sample1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample1, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: conv3_for_downsample1.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample1.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample1.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample1.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample1.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample1.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample1.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample1.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample1.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample1.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample1.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample1.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample1.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample1.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: down_sample2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: down_sample2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: down_sample2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: down_sample2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample2, module type: <class 'nets.CSPdarknet.C3'>
[build_fx_graph] module_name: conv3_for_downsample2.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample2.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample2.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample2.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample2.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample2.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample2.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample2.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample2.cv3, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample2.cv3.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample2.cv3.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample2.cv3.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample2.m, module type: <class 'torch.nn.modules.container.Sequential'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0, module type: <class 'nets.CSPdarknet.Bottleneck'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv1, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv1.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv1.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv1.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv2, module type: <class 'nets.CSPdarknet.Conv'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv2.conv, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv2.bn, module type: <class 'torch.nn.modules.batchnorm.BatchNorm2d'>
[build_fx_graph] module_name: conv3_for_downsample2.m.0.cv2.act, module type: <class 'nets.CSPdarknet.SiLU'>
[build_fx_graph] module_name: yolo_head_P3, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: yolo_head_P4, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1
[build_fx_graph] module_name: yolo_head_P5, module type: <class 'torch.nn.modules.conv.Conv2d'>
[build_fx_graph] this module has 'group' param with value: 1

[print_raw_fx_graph] Print the intermediate representation (IR) with Torch.FX
graph():
    %x : [#users=4] = placeholder[target=x]
    %getitem : [#users=1] = call_function[target=operator.getitem](args = (%x, (Ellipsis, slice(None, None, 2), slice(None, None, 2))), kwargs = {})
    %getitem_1 : [#users=1] = call_function[target=operator.getitem](args = (%x, (Ellipsis, slice(1, None, 2), slice(None, None, 2))), kwargs = {})
    %getitem_2 : [#users=1] = call_function[target=operator.getitem](args = (%x, (Ellipsis, slice(None, None, 2), slice(1, None, 2))), kwargs = {})
    %getitem_3 : [#users=1] = call_function[target=operator.getitem](args = (%x, (Ellipsis, slice(1, None, 2), slice(1, None, 2))), kwargs = {})
    %cat : [#users=1] = call_function[target=torch.cat](args = ([%getitem, %getitem_1, %getitem_2, %getitem_3], 1), kwargs = {})
    %backbone_stem_conv_conv : [#users=1] = call_module[target=backbone.stem.conv.conv](args = (%cat,), kwargs = {})
    %backbone_stem_conv_bn : [#users=2] = call_module[target=backbone.stem.conv.bn](args = (%backbone_stem_conv_conv,), kwargs = {})
    %sigmoid : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_stem_conv_bn,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%backbone_stem_conv_bn, %sigmoid), kwargs = {})
    %backbone_dark2_0_conv : [#users=1] = call_module[target=backbone.dark2.0.conv](args = (%mul,), kwargs = {})
    %backbone_dark2_0_bn : [#users=2] = call_module[target=backbone.dark2.0.bn](args = (%backbone_dark2_0_conv,), kwargs = {})
    %sigmoid_1 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_0_bn,), kwargs = {})
    %mul_1 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark2_0_bn, %sigmoid_1), kwargs = {})
    %backbone_dark2_1_cv1_conv : [#users=1] = call_module[target=backbone.dark2.1.cv1.conv](args = (%mul_1,), kwargs = {})
    %backbone_dark2_1_cv1_bn : [#users=2] = call_module[target=backbone.dark2.1.cv1.bn](args = (%backbone_dark2_1_cv1_conv,), kwargs = {})
    %sigmoid_2 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_1_cv1_bn,), kwargs = {})
    %mul_2 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark2_1_cv1_bn, %sigmoid_2), kwargs = {})
    %backbone_dark2_1_m_0_cv1_conv : [#users=1] = call_module[target=backbone.dark2.1.m.0.cv1.conv](args = (%mul_2,), kwargs = {})
    %backbone_dark2_1_m_0_cv1_bn : [#users=2] = call_module[target=backbone.dark2.1.m.0.cv1.bn](args = (%backbone_dark2_1_m_0_cv1_conv,), kwargs = {})
    %sigmoid_3 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_1_m_0_cv1_bn,), kwargs = {})
    %mul_3 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark2_1_m_0_cv1_bn, %sigmoid_3), kwargs = {})
    %backbone_dark2_1_m_0_cv2_conv : [#users=1] = call_module[target=backbone.dark2.1.m.0.cv2.conv](args = (%mul_3,), kwargs = {})
    %backbone_dark2_1_m_0_cv2_bn : [#users=2] = call_module[target=backbone.dark2.1.m.0.cv2.bn](args = (%backbone_dark2_1_m_0_cv2_conv,), kwargs = {})
    %sigmoid_4 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_1_m_0_cv2_bn,), kwargs = {})
    %mul_4 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark2_1_m_0_cv2_bn, %sigmoid_4), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%mul_2, %mul_4), kwargs = {})
    %backbone_dark2_1_cv2_conv : [#users=1] = call_module[target=backbone.dark2.1.cv2.conv](args = (%mul_1,), kwargs = {})
    %backbone_dark2_1_cv2_bn : [#users=2] = call_module[target=backbone.dark2.1.cv2.bn](args = (%backbone_dark2_1_cv2_conv,), kwargs = {})
    %sigmoid_5 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_1_cv2_bn,), kwargs = {})
    %mul_5 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark2_1_cv2_bn, %sigmoid_5), kwargs = {})
    %cat_1 : [#users=1] = call_function[target=torch.cat](args = ((%add, %mul_5),), kwargs = {dim: 1})
    %backbone_dark2_1_cv3_conv : [#users=1] = call_module[target=backbone.dark2.1.cv3.conv](args = (%cat_1,), kwargs = {})
    %backbone_dark2_1_cv3_bn : [#users=2] = call_module[target=backbone.dark2.1.cv3.bn](args = (%backbone_dark2_1_cv3_conv,), kwargs = {})
    %sigmoid_6 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark2_1_cv3_bn,), kwargs = {})
    %mul_6 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark2_1_cv3_bn, %sigmoid_6), kwargs = {})
    %backbone_dark3_0_conv : [#users=1] = call_module[target=backbone.dark3.0.conv](args = (%mul_6,), kwargs = {})
    %backbone_dark3_0_bn : [#users=2] = call_module[target=backbone.dark3.0.bn](args = (%backbone_dark3_0_conv,), kwargs = {})
    %sigmoid_7 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_0_bn,), kwargs = {})
    %mul_7 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark3_0_bn, %sigmoid_7), kwargs = {})
    %backbone_dark3_1_cv1_conv : [#users=1] = call_module[target=backbone.dark3.1.cv1.conv](args = (%mul_7,), kwargs = {})
    %backbone_dark3_1_cv1_bn : [#users=2] = call_module[target=backbone.dark3.1.cv1.bn](args = (%backbone_dark3_1_cv1_conv,), kwargs = {})
    %sigmoid_8 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_cv1_bn,), kwargs = {})
    %mul_8 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark3_1_cv1_bn, %sigmoid_8), kwargs = {})
    %backbone_dark3_1_m_0_cv1_conv : [#users=1] = call_module[target=backbone.dark3.1.m.0.cv1.conv](args = (%mul_8,), kwargs = {})
    %backbone_dark3_1_m_0_cv1_bn : [#users=2] = call_module[target=backbone.dark3.1.m.0.cv1.bn](args = (%backbone_dark3_1_m_0_cv1_conv,), kwargs = {})
    %sigmoid_9 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_0_cv1_bn,), kwargs = {})
    %mul_9 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_0_cv1_bn, %sigmoid_9), kwargs = {})
    %backbone_dark3_1_m_0_cv2_conv : [#users=1] = call_module[target=backbone.dark3.1.m.0.cv2.conv](args = (%mul_9,), kwargs = {})
    %backbone_dark3_1_m_0_cv2_bn : [#users=2] = call_module[target=backbone.dark3.1.m.0.cv2.bn](args = (%backbone_dark3_1_m_0_cv2_conv,), kwargs = {})
    %sigmoid_10 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_0_cv2_bn,), kwargs = {})
    %mul_10 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_0_cv2_bn, %sigmoid_10), kwargs = {})
    %add_1 : [#users=2] = call_function[target=operator.add](args = (%mul_8, %mul_10), kwargs = {})
    %backbone_dark3_1_m_1_cv1_conv : [#users=1] = call_module[target=backbone.dark3.1.m.1.cv1.conv](args = (%add_1,), kwargs = {})
    %backbone_dark3_1_m_1_cv1_bn : [#users=2] = call_module[target=backbone.dark3.1.m.1.cv1.bn](args = (%backbone_dark3_1_m_1_cv1_conv,), kwargs = {})
    %sigmoid_11 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_1_cv1_bn,), kwargs = {})
    %mul_11 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_1_cv1_bn, %sigmoid_11), kwargs = {})
    %backbone_dark3_1_m_1_cv2_conv : [#users=1] = call_module[target=backbone.dark3.1.m.1.cv2.conv](args = (%mul_11,), kwargs = {})
    %backbone_dark3_1_m_1_cv2_bn : [#users=2] = call_module[target=backbone.dark3.1.m.1.cv2.bn](args = (%backbone_dark3_1_m_1_cv2_conv,), kwargs = {})
    %sigmoid_12 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_1_cv2_bn,), kwargs = {})
    %mul_12 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_1_cv2_bn, %sigmoid_12), kwargs = {})
    %add_2 : [#users=2] = call_function[target=operator.add](args = (%add_1, %mul_12), kwargs = {})
    %backbone_dark3_1_m_2_cv1_conv : [#users=1] = call_module[target=backbone.dark3.1.m.2.cv1.conv](args = (%add_2,), kwargs = {})
    %backbone_dark3_1_m_2_cv1_bn : [#users=2] = call_module[target=backbone.dark3.1.m.2.cv1.bn](args = (%backbone_dark3_1_m_2_cv1_conv,), kwargs = {})
    %sigmoid_13 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_2_cv1_bn,), kwargs = {})
    %mul_13 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_2_cv1_bn, %sigmoid_13), kwargs = {})
    %backbone_dark3_1_m_2_cv2_conv : [#users=1] = call_module[target=backbone.dark3.1.m.2.cv2.conv](args = (%mul_13,), kwargs = {})
    %backbone_dark3_1_m_2_cv2_bn : [#users=2] = call_module[target=backbone.dark3.1.m.2.cv2.bn](args = (%backbone_dark3_1_m_2_cv2_conv,), kwargs = {})
    %sigmoid_14 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_m_2_cv2_bn,), kwargs = {})
    %mul_14 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_m_2_cv2_bn, %sigmoid_14), kwargs = {})
    %add_3 : [#users=1] = call_function[target=operator.add](args = (%add_2, %mul_14), kwargs = {})
    %backbone_dark3_1_cv2_conv : [#users=1] = call_module[target=backbone.dark3.1.cv2.conv](args = (%mul_7,), kwargs = {})
    %backbone_dark3_1_cv2_bn : [#users=2] = call_module[target=backbone.dark3.1.cv2.bn](args = (%backbone_dark3_1_cv2_conv,), kwargs = {})
    %sigmoid_15 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_cv2_bn,), kwargs = {})
    %mul_15 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark3_1_cv2_bn, %sigmoid_15), kwargs = {})
    %cat_2 : [#users=1] = call_function[target=torch.cat](args = ((%add_3, %mul_15),), kwargs = {dim: 1})
    %backbone_dark3_1_cv3_conv : [#users=1] = call_module[target=backbone.dark3.1.cv3.conv](args = (%cat_2,), kwargs = {})
    %backbone_dark3_1_cv3_bn : [#users=2] = call_module[target=backbone.dark3.1.cv3.bn](args = (%backbone_dark3_1_cv3_conv,), kwargs = {})
    %sigmoid_16 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark3_1_cv3_bn,), kwargs = {})
    %mul_16 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark3_1_cv3_bn, %sigmoid_16), kwargs = {})
    %backbone_dark4_0_conv : [#users=1] = call_module[target=backbone.dark4.0.conv](args = (%mul_16,), kwargs = {})
    %backbone_dark4_0_bn : [#users=2] = call_module[target=backbone.dark4.0.bn](args = (%backbone_dark4_0_conv,), kwargs = {})
    %sigmoid_17 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_0_bn,), kwargs = {})
    %mul_17 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark4_0_bn, %sigmoid_17), kwargs = {})
    %backbone_dark4_1_cv1_conv : [#users=1] = call_module[target=backbone.dark4.1.cv1.conv](args = (%mul_17,), kwargs = {})
    %backbone_dark4_1_cv1_bn : [#users=2] = call_module[target=backbone.dark4.1.cv1.bn](args = (%backbone_dark4_1_cv1_conv,), kwargs = {})
    %sigmoid_18 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_cv1_bn,), kwargs = {})
    %mul_18 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark4_1_cv1_bn, %sigmoid_18), kwargs = {})
    %backbone_dark4_1_m_0_cv1_conv : [#users=1] = call_module[target=backbone.dark4.1.m.0.cv1.conv](args = (%mul_18,), kwargs = {})
    %backbone_dark4_1_m_0_cv1_bn : [#users=2] = call_module[target=backbone.dark4.1.m.0.cv1.bn](args = (%backbone_dark4_1_m_0_cv1_conv,), kwargs = {})
    %sigmoid_19 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_0_cv1_bn,), kwargs = {})
    %mul_19 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_0_cv1_bn, %sigmoid_19), kwargs = {})
    %backbone_dark4_1_m_0_cv2_conv : [#users=1] = call_module[target=backbone.dark4.1.m.0.cv2.conv](args = (%mul_19,), kwargs = {})
    %backbone_dark4_1_m_0_cv2_bn : [#users=2] = call_module[target=backbone.dark4.1.m.0.cv2.bn](args = (%backbone_dark4_1_m_0_cv2_conv,), kwargs = {})
    %sigmoid_20 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_0_cv2_bn,), kwargs = {})
    %mul_20 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_0_cv2_bn, %sigmoid_20), kwargs = {})
    %add_4 : [#users=2] = call_function[target=operator.add](args = (%mul_18, %mul_20), kwargs = {})
    %backbone_dark4_1_m_1_cv1_conv : [#users=1] = call_module[target=backbone.dark4.1.m.1.cv1.conv](args = (%add_4,), kwargs = {})
    %backbone_dark4_1_m_1_cv1_bn : [#users=2] = call_module[target=backbone.dark4.1.m.1.cv1.bn](args = (%backbone_dark4_1_m_1_cv1_conv,), kwargs = {})
    %sigmoid_21 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_1_cv1_bn,), kwargs = {})
    %mul_21 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_1_cv1_bn, %sigmoid_21), kwargs = {})
    %backbone_dark4_1_m_1_cv2_conv : [#users=1] = call_module[target=backbone.dark4.1.m.1.cv2.conv](args = (%mul_21,), kwargs = {})
    %backbone_dark4_1_m_1_cv2_bn : [#users=2] = call_module[target=backbone.dark4.1.m.1.cv2.bn](args = (%backbone_dark4_1_m_1_cv2_conv,), kwargs = {})
    %sigmoid_22 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_1_cv2_bn,), kwargs = {})
    %mul_22 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_1_cv2_bn, %sigmoid_22), kwargs = {})
    %add_5 : [#users=2] = call_function[target=operator.add](args = (%add_4, %mul_22), kwargs = {})
    %backbone_dark4_1_m_2_cv1_conv : [#users=1] = call_module[target=backbone.dark4.1.m.2.cv1.conv](args = (%add_5,), kwargs = {})
    %backbone_dark4_1_m_2_cv1_bn : [#users=2] = call_module[target=backbone.dark4.1.m.2.cv1.bn](args = (%backbone_dark4_1_m_2_cv1_conv,), kwargs = {})
    %sigmoid_23 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_2_cv1_bn,), kwargs = {})
    %mul_23 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_2_cv1_bn, %sigmoid_23), kwargs = {})
    %backbone_dark4_1_m_2_cv2_conv : [#users=1] = call_module[target=backbone.dark4.1.m.2.cv2.conv](args = (%mul_23,), kwargs = {})
    %backbone_dark4_1_m_2_cv2_bn : [#users=2] = call_module[target=backbone.dark4.1.m.2.cv2.bn](args = (%backbone_dark4_1_m_2_cv2_conv,), kwargs = {})
    %sigmoid_24 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_m_2_cv2_bn,), kwargs = {})
    %mul_24 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_m_2_cv2_bn, %sigmoid_24), kwargs = {})
    %add_6 : [#users=1] = call_function[target=operator.add](args = (%add_5, %mul_24), kwargs = {})
    %backbone_dark4_1_cv2_conv : [#users=1] = call_module[target=backbone.dark4.1.cv2.conv](args = (%mul_17,), kwargs = {})
    %backbone_dark4_1_cv2_bn : [#users=2] = call_module[target=backbone.dark4.1.cv2.bn](args = (%backbone_dark4_1_cv2_conv,), kwargs = {})
    %sigmoid_25 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_cv2_bn,), kwargs = {})
    %mul_25 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark4_1_cv2_bn, %sigmoid_25), kwargs = {})
    %cat_3 : [#users=1] = call_function[target=torch.cat](args = ((%add_6, %mul_25),), kwargs = {dim: 1})
    %backbone_dark4_1_cv3_conv : [#users=1] = call_module[target=backbone.dark4.1.cv3.conv](args = (%cat_3,), kwargs = {})
    %backbone_dark4_1_cv3_bn : [#users=2] = call_module[target=backbone.dark4.1.cv3.bn](args = (%backbone_dark4_1_cv3_conv,), kwargs = {})
    %sigmoid_26 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark4_1_cv3_bn,), kwargs = {})
    %mul_26 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark4_1_cv3_bn, %sigmoid_26), kwargs = {})
    %backbone_dark5_0_conv : [#users=1] = call_module[target=backbone.dark5.0.conv](args = (%mul_26,), kwargs = {})
    %backbone_dark5_0_bn : [#users=2] = call_module[target=backbone.dark5.0.bn](args = (%backbone_dark5_0_conv,), kwargs = {})
    %sigmoid_27 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_0_bn,), kwargs = {})
    %mul_27 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_0_bn, %sigmoid_27), kwargs = {})
    %backbone_dark5_1_cv1_conv : [#users=1] = call_module[target=backbone.dark5.1.cv1.conv](args = (%mul_27,), kwargs = {})
    %backbone_dark5_1_cv1_bn : [#users=2] = call_module[target=backbone.dark5.1.cv1.bn](args = (%backbone_dark5_1_cv1_conv,), kwargs = {})
    %sigmoid_28 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_1_cv1_bn,), kwargs = {})
    %mul_28 : [#users=4] = call_function[target=operator.mul](args = (%backbone_dark5_1_cv1_bn, %sigmoid_28), kwargs = {})
    %backbone_dark5_1_m_0 : [#users=1] = call_module[target=backbone.dark5.1.m.0](args = (%mul_28,), kwargs = {})
    %backbone_dark5_1_m_1 : [#users=1] = call_module[target=backbone.dark5.1.m.1](args = (%mul_28,), kwargs = {})
    %backbone_dark5_1_m_2 : [#users=1] = call_module[target=backbone.dark5.1.m.2](args = (%mul_28,), kwargs = {})
    %cat_4 : [#users=1] = call_function[target=torch.cat](args = ([%mul_28, %backbone_dark5_1_m_0, %backbone_dark5_1_m_1, %backbone_dark5_1_m_2], 1), kwargs = {})
    %backbone_dark5_1_cv2_conv : [#users=1] = call_module[target=backbone.dark5.1.cv2.conv](args = (%cat_4,), kwargs = {})
    %backbone_dark5_1_cv2_bn : [#users=2] = call_module[target=backbone.dark5.1.cv2.bn](args = (%backbone_dark5_1_cv2_conv,), kwargs = {})
    %sigmoid_29 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_1_cv2_bn,), kwargs = {})
    %mul_29 : [#users=2] = call_function[target=operator.mul](args = (%backbone_dark5_1_cv2_bn, %sigmoid_29), kwargs = {})
    %backbone_dark5_2_cv1_conv : [#users=1] = call_module[target=backbone.dark5.2.cv1.conv](args = (%mul_29,), kwargs = {})
    %backbone_dark5_2_cv1_bn : [#users=2] = call_module[target=backbone.dark5.2.cv1.bn](args = (%backbone_dark5_2_cv1_conv,), kwargs = {})
    %sigmoid_30 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_2_cv1_bn,), kwargs = {})
    %mul_30 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_2_cv1_bn, %sigmoid_30), kwargs = {})
    %backbone_dark5_2_m_0_cv1_conv : [#users=1] = call_module[target=backbone.dark5.2.m.0.cv1.conv](args = (%mul_30,), kwargs = {})
    %backbone_dark5_2_m_0_cv1_bn : [#users=2] = call_module[target=backbone.dark5.2.m.0.cv1.bn](args = (%backbone_dark5_2_m_0_cv1_conv,), kwargs = {})
    %sigmoid_31 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_2_m_0_cv1_bn,), kwargs = {})
    %mul_31 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_2_m_0_cv1_bn, %sigmoid_31), kwargs = {})
    %backbone_dark5_2_m_0_cv2_conv : [#users=1] = call_module[target=backbone.dark5.2.m.0.cv2.conv](args = (%mul_31,), kwargs = {})
    %backbone_dark5_2_m_0_cv2_bn : [#users=2] = call_module[target=backbone.dark5.2.m.0.cv2.bn](args = (%backbone_dark5_2_m_0_cv2_conv,), kwargs = {})
    %sigmoid_32 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_2_m_0_cv2_bn,), kwargs = {})
    %mul_32 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_2_m_0_cv2_bn, %sigmoid_32), kwargs = {})
    %backbone_dark5_2_cv2_conv : [#users=1] = call_module[target=backbone.dark5.2.cv2.conv](args = (%mul_29,), kwargs = {})
    %backbone_dark5_2_cv2_bn : [#users=2] = call_module[target=backbone.dark5.2.cv2.bn](args = (%backbone_dark5_2_cv2_conv,), kwargs = {})
    %sigmoid_33 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_2_cv2_bn,), kwargs = {})
    %mul_33 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_2_cv2_bn, %sigmoid_33), kwargs = {})
    %cat_5 : [#users=1] = call_function[target=torch.cat](args = ((%mul_32, %mul_33),), kwargs = {dim: 1})
    %backbone_dark5_2_cv3_conv : [#users=1] = call_module[target=backbone.dark5.2.cv3.conv](args = (%cat_5,), kwargs = {})
    %backbone_dark5_2_cv3_bn : [#users=2] = call_module[target=backbone.dark5.2.cv3.bn](args = (%backbone_dark5_2_cv3_conv,), kwargs = {})
    %sigmoid_34 : [#users=1] = call_function[target=torch.sigmoid](args = (%backbone_dark5_2_cv3_bn,), kwargs = {})
    %mul_34 : [#users=1] = call_function[target=operator.mul](args = (%backbone_dark5_2_cv3_bn, %sigmoid_34), kwargs = {})
    %conv_for_feat3_conv : [#users=1] = call_module[target=conv_for_feat3.conv](args = (%mul_34,), kwargs = {})
    %conv_for_feat3_bn : [#users=2] = call_module[target=conv_for_feat3.bn](args = (%conv_for_feat3_conv,), kwargs = {})
    %sigmoid_35 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv_for_feat3_bn,), kwargs = {})
    %mul_35 : [#users=2] = call_function[target=operator.mul](args = (%conv_for_feat3_bn, %sigmoid_35), kwargs = {})
    %upsample : [#users=1] = call_module[target=upsample](args = (%mul_35,), kwargs = {})
    %cat_6 : [#users=2] = call_function[target=torch.cat](args = ([%upsample, %mul_26], 1), kwargs = {})
    %conv3_for_upsample1_cv1_conv : [#users=1] = call_module[target=conv3_for_upsample1.cv1.conv](args = (%cat_6,), kwargs = {})
    %conv3_for_upsample1_cv1_bn : [#users=2] = call_module[target=conv3_for_upsample1.cv1.bn](args = (%conv3_for_upsample1_cv1_conv,), kwargs = {})
    %sigmoid_36 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample1_cv1_bn,), kwargs = {})
    %mul_36 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample1_cv1_bn, %sigmoid_36), kwargs = {})
    %conv3_for_upsample1_m_0_cv1_conv : [#users=1] = call_module[target=conv3_for_upsample1.m.0.cv1.conv](args = (%mul_36,), kwargs = {})
    %conv3_for_upsample1_m_0_cv1_bn : [#users=2] = call_module[target=conv3_for_upsample1.m.0.cv1.bn](args = (%conv3_for_upsample1_m_0_cv1_conv,), kwargs = {})
    %sigmoid_37 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample1_m_0_cv1_bn,), kwargs = {})
    %mul_37 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample1_m_0_cv1_bn, %sigmoid_37), kwargs = {})
    %conv3_for_upsample1_m_0_cv2_conv : [#users=1] = call_module[target=conv3_for_upsample1.m.0.cv2.conv](args = (%mul_37,), kwargs = {})
    %conv3_for_upsample1_m_0_cv2_bn : [#users=2] = call_module[target=conv3_for_upsample1.m.0.cv2.bn](args = (%conv3_for_upsample1_m_0_cv2_conv,), kwargs = {})
    %sigmoid_38 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample1_m_0_cv2_bn,), kwargs = {})
    %mul_38 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample1_m_0_cv2_bn, %sigmoid_38), kwargs = {})
    %conv3_for_upsample1_cv2_conv : [#users=1] = call_module[target=conv3_for_upsample1.cv2.conv](args = (%cat_6,), kwargs = {})
    %conv3_for_upsample1_cv2_bn : [#users=2] = call_module[target=conv3_for_upsample1.cv2.bn](args = (%conv3_for_upsample1_cv2_conv,), kwargs = {})
    %sigmoid_39 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample1_cv2_bn,), kwargs = {})
    %mul_39 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample1_cv2_bn, %sigmoid_39), kwargs = {})
    %cat_7 : [#users=1] = call_function[target=torch.cat](args = ((%mul_38, %mul_39),), kwargs = {dim: 1})
    %conv3_for_upsample1_cv3_conv : [#users=1] = call_module[target=conv3_for_upsample1.cv3.conv](args = (%cat_7,), kwargs = {})
    %conv3_for_upsample1_cv3_bn : [#users=2] = call_module[target=conv3_for_upsample1.cv3.bn](args = (%conv3_for_upsample1_cv3_conv,), kwargs = {})
    %sigmoid_40 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample1_cv3_bn,), kwargs = {})
    %mul_40 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample1_cv3_bn, %sigmoid_40), kwargs = {})
    %conv_for_feat2_conv : [#users=1] = call_module[target=conv_for_feat2.conv](args = (%mul_40,), kwargs = {})
    %conv_for_feat2_bn : [#users=2] = call_module[target=conv_for_feat2.bn](args = (%conv_for_feat2_conv,), kwargs = {})
    %sigmoid_41 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv_for_feat2_bn,), kwargs = {})
    %mul_41 : [#users=2] = call_function[target=operator.mul](args = (%conv_for_feat2_bn, %sigmoid_41), kwargs = {})
    %upsample_1 : [#users=1] = call_module[target=upsample](args = (%mul_41,), kwargs = {})
    %cat_8 : [#users=2] = call_function[target=torch.cat](args = ([%upsample_1, %mul_16], 1), kwargs = {})
    %conv3_for_upsample2_cv1_conv : [#users=1] = call_module[target=conv3_for_upsample2.cv1.conv](args = (%cat_8,), kwargs = {})
    %conv3_for_upsample2_cv1_bn : [#users=2] = call_module[target=conv3_for_upsample2.cv1.bn](args = (%conv3_for_upsample2_cv1_conv,), kwargs = {})
    %sigmoid_42 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample2_cv1_bn,), kwargs = {})
    %mul_42 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample2_cv1_bn, %sigmoid_42), kwargs = {})
    %conv3_for_upsample2_m_0_cv1_conv : [#users=1] = call_module[target=conv3_for_upsample2.m.0.cv1.conv](args = (%mul_42,), kwargs = {})
    %conv3_for_upsample2_m_0_cv1_bn : [#users=2] = call_module[target=conv3_for_upsample2.m.0.cv1.bn](args = (%conv3_for_upsample2_m_0_cv1_conv,), kwargs = {})
    %sigmoid_43 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample2_m_0_cv1_bn,), kwargs = {})
    %mul_43 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample2_m_0_cv1_bn, %sigmoid_43), kwargs = {})
    %conv3_for_upsample2_m_0_cv2_conv : [#users=1] = call_module[target=conv3_for_upsample2.m.0.cv2.conv](args = (%mul_43,), kwargs = {})
    %conv3_for_upsample2_m_0_cv2_bn : [#users=2] = call_module[target=conv3_for_upsample2.m.0.cv2.bn](args = (%conv3_for_upsample2_m_0_cv2_conv,), kwargs = {})
    %sigmoid_44 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample2_m_0_cv2_bn,), kwargs = {})
    %mul_44 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample2_m_0_cv2_bn, %sigmoid_44), kwargs = {})
    %conv3_for_upsample2_cv2_conv : [#users=1] = call_module[target=conv3_for_upsample2.cv2.conv](args = (%cat_8,), kwargs = {})
    %conv3_for_upsample2_cv2_bn : [#users=2] = call_module[target=conv3_for_upsample2.cv2.bn](args = (%conv3_for_upsample2_cv2_conv,), kwargs = {})
    %sigmoid_45 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample2_cv2_bn,), kwargs = {})
    %mul_45 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_upsample2_cv2_bn, %sigmoid_45), kwargs = {})
    %cat_9 : [#users=1] = call_function[target=torch.cat](args = ((%mul_44, %mul_45),), kwargs = {dim: 1})
    %conv3_for_upsample2_cv3_conv : [#users=1] = call_module[target=conv3_for_upsample2.cv3.conv](args = (%cat_9,), kwargs = {})
    %conv3_for_upsample2_cv3_bn : [#users=2] = call_module[target=conv3_for_upsample2.cv3.bn](args = (%conv3_for_upsample2_cv3_conv,), kwargs = {})
    %sigmoid_46 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_upsample2_cv3_bn,), kwargs = {})
    %mul_46 : [#users=2] = call_function[target=operator.mul](args = (%conv3_for_upsample2_cv3_bn, %sigmoid_46), kwargs = {})
    %down_sample1_conv : [#users=1] = call_module[target=down_sample1.conv](args = (%mul_46,), kwargs = {})
    %down_sample1_bn : [#users=2] = call_module[target=down_sample1.bn](args = (%down_sample1_conv,), kwargs = {})
    %sigmoid_47 : [#users=1] = call_function[target=torch.sigmoid](args = (%down_sample1_bn,), kwargs = {})
    %mul_47 : [#users=1] = call_function[target=operator.mul](args = (%down_sample1_bn, %sigmoid_47), kwargs = {})
    %cat_10 : [#users=2] = call_function[target=torch.cat](args = ([%mul_47, %mul_41], 1), kwargs = {})
    %conv3_for_downsample1_cv1_conv : [#users=1] = call_module[target=conv3_for_downsample1.cv1.conv](args = (%cat_10,), kwargs = {})
    %conv3_for_downsample1_cv1_bn : [#users=2] = call_module[target=conv3_for_downsample1.cv1.bn](args = (%conv3_for_downsample1_cv1_conv,), kwargs = {})
    %sigmoid_48 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample1_cv1_bn,), kwargs = {})
    %mul_48 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample1_cv1_bn, %sigmoid_48), kwargs = {})
    %conv3_for_downsample1_m_0_cv1_conv : [#users=1] = call_module[target=conv3_for_downsample1.m.0.cv1.conv](args = (%mul_48,), kwargs = {})
    %conv3_for_downsample1_m_0_cv1_bn : [#users=2] = call_module[target=conv3_for_downsample1.m.0.cv1.bn](args = (%conv3_for_downsample1_m_0_cv1_conv,), kwargs = {})
    %sigmoid_49 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample1_m_0_cv1_bn,), kwargs = {})
    %mul_49 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample1_m_0_cv1_bn, %sigmoid_49), kwargs = {})
    %conv3_for_downsample1_m_0_cv2_conv : [#users=1] = call_module[target=conv3_for_downsample1.m.0.cv2.conv](args = (%mul_49,), kwargs = {})
    %conv3_for_downsample1_m_0_cv2_bn : [#users=2] = call_module[target=conv3_for_downsample1.m.0.cv2.bn](args = (%conv3_for_downsample1_m_0_cv2_conv,), kwargs = {})
    %sigmoid_50 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample1_m_0_cv2_bn,), kwargs = {})
    %mul_50 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample1_m_0_cv2_bn, %sigmoid_50), kwargs = {})
    %conv3_for_downsample1_cv2_conv : [#users=1] = call_module[target=conv3_for_downsample1.cv2.conv](args = (%cat_10,), kwargs = {})
    %conv3_for_downsample1_cv2_bn : [#users=2] = call_module[target=conv3_for_downsample1.cv2.bn](args = (%conv3_for_downsample1_cv2_conv,), kwargs = {})
    %sigmoid_51 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample1_cv2_bn,), kwargs = {})
    %mul_51 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample1_cv2_bn, %sigmoid_51), kwargs = {})
    %cat_11 : [#users=1] = call_function[target=torch.cat](args = ((%mul_50, %mul_51),), kwargs = {dim: 1})
    %conv3_for_downsample1_cv3_conv : [#users=1] = call_module[target=conv3_for_downsample1.cv3.conv](args = (%cat_11,), kwargs = {})
    %conv3_for_downsample1_cv3_bn : [#users=2] = call_module[target=conv3_for_downsample1.cv3.bn](args = (%conv3_for_downsample1_cv3_conv,), kwargs = {})
    %sigmoid_52 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample1_cv3_bn,), kwargs = {})
    %mul_52 : [#users=2] = call_function[target=operator.mul](args = (%conv3_for_downsample1_cv3_bn, %sigmoid_52), kwargs = {})
    %down_sample2_conv : [#users=1] = call_module[target=down_sample2.conv](args = (%mul_52,), kwargs = {})
    %down_sample2_bn : [#users=2] = call_module[target=down_sample2.bn](args = (%down_sample2_conv,), kwargs = {})
    %sigmoid_53 : [#users=1] = call_function[target=torch.sigmoid](args = (%down_sample2_bn,), kwargs = {})
    %mul_53 : [#users=1] = call_function[target=operator.mul](args = (%down_sample2_bn, %sigmoid_53), kwargs = {})
    %cat_12 : [#users=2] = call_function[target=torch.cat](args = ([%mul_53, %mul_35], 1), kwargs = {})
    %conv3_for_downsample2_cv1_conv : [#users=1] = call_module[target=conv3_for_downsample2.cv1.conv](args = (%cat_12,), kwargs = {})
    %conv3_for_downsample2_cv1_bn : [#users=2] = call_module[target=conv3_for_downsample2.cv1.bn](args = (%conv3_for_downsample2_cv1_conv,), kwargs = {})
    %sigmoid_54 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample2_cv1_bn,), kwargs = {})
    %mul_54 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample2_cv1_bn, %sigmoid_54), kwargs = {})
    %conv3_for_downsample2_m_0_cv1_conv : [#users=1] = call_module[target=conv3_for_downsample2.m.0.cv1.conv](args = (%mul_54,), kwargs = {})
    %conv3_for_downsample2_m_0_cv1_bn : [#users=2] = call_module[target=conv3_for_downsample2.m.0.cv1.bn](args = (%conv3_for_downsample2_m_0_cv1_conv,), kwargs = {})
    %sigmoid_55 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample2_m_0_cv1_bn,), kwargs = {})
    %mul_55 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample2_m_0_cv1_bn, %sigmoid_55), kwargs = {})
    %conv3_for_downsample2_m_0_cv2_conv : [#users=1] = call_module[target=conv3_for_downsample2.m.0.cv2.conv](args = (%mul_55,), kwargs = {})
    %conv3_for_downsample2_m_0_cv2_bn : [#users=2] = call_module[target=conv3_for_downsample2.m.0.cv2.bn](args = (%conv3_for_downsample2_m_0_cv2_conv,), kwargs = {})
    %sigmoid_56 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample2_m_0_cv2_bn,), kwargs = {})
    %mul_56 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample2_m_0_cv2_bn, %sigmoid_56), kwargs = {})
    %conv3_for_downsample2_cv2_conv : [#users=1] = call_module[target=conv3_for_downsample2.cv2.conv](args = (%cat_12,), kwargs = {})
    %conv3_for_downsample2_cv2_bn : [#users=2] = call_module[target=conv3_for_downsample2.cv2.bn](args = (%conv3_for_downsample2_cv2_conv,), kwargs = {})
    %sigmoid_57 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample2_cv2_bn,), kwargs = {})
    %mul_57 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample2_cv2_bn, %sigmoid_57), kwargs = {})
    %cat_13 : [#users=1] = call_function[target=torch.cat](args = ((%mul_56, %mul_57),), kwargs = {dim: 1})
    %conv3_for_downsample2_cv3_conv : [#users=1] = call_module[target=conv3_for_downsample2.cv3.conv](args = (%cat_13,), kwargs = {})
    %conv3_for_downsample2_cv3_bn : [#users=2] = call_module[target=conv3_for_downsample2.cv3.bn](args = (%conv3_for_downsample2_cv3_conv,), kwargs = {})
    %sigmoid_58 : [#users=1] = call_function[target=torch.sigmoid](args = (%conv3_for_downsample2_cv3_bn,), kwargs = {})
    %mul_58 : [#users=1] = call_function[target=operator.mul](args = (%conv3_for_downsample2_cv3_bn, %sigmoid_58), kwargs = {})
    %yolo_head_p3 : [#users=1] = call_module[target=yolo_head_P3](args = (%mul_46,), kwargs = {})
    %yolo_head_p4 : [#users=1] = call_module[target=yolo_head_P4](args = (%mul_52,), kwargs = {})
    %yolo_head_p5 : [#users=1] = call_module[target=yolo_head_P5](args = (%mul_58,), kwargs = {})
    return (yolo_head_p5, yolo_head_p4, yolo_head_p3)

[print_raw_fx_graph] Print the intermediate representation (IR) with Torch.FX in a table format
opcode         name                                target                                                      args                                                                             kwargs
-------------  ----------------------------------  ----------------------------------------------------------  -------------------------------------------------------------------------------  ----------
placeholder    x                                   x                                                           ()                                                                               {}
call_function  getitem                             <built-in function getitem>                                 (x, (Ellipsis, slice(None, None, 2), slice(None, None, 2)))                      {}
call_function  getitem_1                           <built-in function getitem>                                 (x, (Ellipsis, slice(1, None, 2), slice(None, None, 2)))                         {}
call_function  getitem_2                           <built-in function getitem>                                 (x, (Ellipsis, slice(None, None, 2), slice(1, None, 2)))                         {}
call_function  getitem_3                           <built-in function getitem>                                 (x, (Ellipsis, slice(1, None, 2), slice(1, None, 2)))                            {}
call_function  cat                                 <built-in method cat of type object at 0x7fbbec361940>      ([getitem, getitem_1, getitem_2, getitem_3], 1)                                  {}
call_module    backbone_stem_conv_conv             backbone.stem.conv.conv                                     (cat,)                                                                           {}
call_module    backbone_stem_conv_bn               backbone.stem.conv.bn                                       (backbone_stem_conv_conv,)                                                       {}
call_function  sigmoid                             <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_stem_conv_bn,)                                                         {}
call_function  mul                                 <built-in function mul>                                     (backbone_stem_conv_bn, sigmoid)                                                 {}
call_module    backbone_dark2_0_conv               backbone.dark2.0.conv                                       (mul,)                                                                           {}
call_module    backbone_dark2_0_bn                 backbone.dark2.0.bn                                         (backbone_dark2_0_conv,)                                                         {}
call_function  sigmoid_1                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_0_bn,)                                                           {}
call_function  mul_1                               <built-in function mul>                                     (backbone_dark2_0_bn, sigmoid_1)                                                 {}
call_module    backbone_dark2_1_cv1_conv           backbone.dark2.1.cv1.conv                                   (mul_1,)                                                                         {}
call_module    backbone_dark2_1_cv1_bn             backbone.dark2.1.cv1.bn                                     (backbone_dark2_1_cv1_conv,)                                                     {}
call_function  sigmoid_2                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_1_cv1_bn,)                                                       {}
call_function  mul_2                               <built-in function mul>                                     (backbone_dark2_1_cv1_bn, sigmoid_2)                                             {}
call_module    backbone_dark2_1_m_0_cv1_conv       backbone.dark2.1.m.0.cv1.conv                               (mul_2,)                                                                         {}
call_module    backbone_dark2_1_m_0_cv1_bn         backbone.dark2.1.m.0.cv1.bn                                 (backbone_dark2_1_m_0_cv1_conv,)                                                 {}
call_function  sigmoid_3                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_1_m_0_cv1_bn,)                                                   {}
call_function  mul_3                               <built-in function mul>                                     (backbone_dark2_1_m_0_cv1_bn, sigmoid_3)                                         {}
call_module    backbone_dark2_1_m_0_cv2_conv       backbone.dark2.1.m.0.cv2.conv                               (mul_3,)                                                                         {}
call_module    backbone_dark2_1_m_0_cv2_bn         backbone.dark2.1.m.0.cv2.bn                                 (backbone_dark2_1_m_0_cv2_conv,)                                                 {}
call_function  sigmoid_4                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_1_m_0_cv2_bn,)                                                   {}
call_function  mul_4                               <built-in function mul>                                     (backbone_dark2_1_m_0_cv2_bn, sigmoid_4)                                         {}
call_function  add                                 <built-in function add>                                     (mul_2, mul_4)                                                                   {}
call_module    backbone_dark2_1_cv2_conv           backbone.dark2.1.cv2.conv                                   (mul_1,)                                                                         {}
call_module    backbone_dark2_1_cv2_bn             backbone.dark2.1.cv2.bn                                     (backbone_dark2_1_cv2_conv,)                                                     {}
call_function  sigmoid_5                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_1_cv2_bn,)                                                       {}
call_function  mul_5                               <built-in function mul>                                     (backbone_dark2_1_cv2_bn, sigmoid_5)                                             {}
call_function  cat_1                               <built-in method cat of type object at 0x7fbbec361940>      ((add, mul_5),)                                                                  {'dim': 1}
call_module    backbone_dark2_1_cv3_conv           backbone.dark2.1.cv3.conv                                   (cat_1,)                                                                         {}
call_module    backbone_dark2_1_cv3_bn             backbone.dark2.1.cv3.bn                                     (backbone_dark2_1_cv3_conv,)                                                     {}
call_function  sigmoid_6                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark2_1_cv3_bn,)                                                       {}
call_function  mul_6                               <built-in function mul>                                     (backbone_dark2_1_cv3_bn, sigmoid_6)                                             {}
call_module    backbone_dark3_0_conv               backbone.dark3.0.conv                                       (mul_6,)                                                                         {}
call_module    backbone_dark3_0_bn                 backbone.dark3.0.bn                                         (backbone_dark3_0_conv,)                                                         {}
call_function  sigmoid_7                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_0_bn,)                                                           {}
call_function  mul_7                               <built-in function mul>                                     (backbone_dark3_0_bn, sigmoid_7)                                                 {}
call_module    backbone_dark3_1_cv1_conv           backbone.dark3.1.cv1.conv                                   (mul_7,)                                                                         {}
call_module    backbone_dark3_1_cv1_bn             backbone.dark3.1.cv1.bn                                     (backbone_dark3_1_cv1_conv,)                                                     {}
call_function  sigmoid_8                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_cv1_bn,)                                                       {}
call_function  mul_8                               <built-in function mul>                                     (backbone_dark3_1_cv1_bn, sigmoid_8)                                             {}
call_module    backbone_dark3_1_m_0_cv1_conv       backbone.dark3.1.m.0.cv1.conv                               (mul_8,)                                                                         {}
call_module    backbone_dark3_1_m_0_cv1_bn         backbone.dark3.1.m.0.cv1.bn                                 (backbone_dark3_1_m_0_cv1_conv,)                                                 {}
call_function  sigmoid_9                           <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_0_cv1_bn,)                                                   {}
call_function  mul_9                               <built-in function mul>                                     (backbone_dark3_1_m_0_cv1_bn, sigmoid_9)                                         {}
call_module    backbone_dark3_1_m_0_cv2_conv       backbone.dark3.1.m.0.cv2.conv                               (mul_9,)                                                                         {}
call_module    backbone_dark3_1_m_0_cv2_bn         backbone.dark3.1.m.0.cv2.bn                                 (backbone_dark3_1_m_0_cv2_conv,)                                                 {}
call_function  sigmoid_10                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_0_cv2_bn,)                                                   {}
call_function  mul_10                              <built-in function mul>                                     (backbone_dark3_1_m_0_cv2_bn, sigmoid_10)                                        {}
call_function  add_1                               <built-in function add>                                     (mul_8, mul_10)                                                                  {}
call_module    backbone_dark3_1_m_1_cv1_conv       backbone.dark3.1.m.1.cv1.conv                               (add_1,)                                                                         {}
call_module    backbone_dark3_1_m_1_cv1_bn         backbone.dark3.1.m.1.cv1.bn                                 (backbone_dark3_1_m_1_cv1_conv,)                                                 {}
call_function  sigmoid_11                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_1_cv1_bn,)                                                   {}
call_function  mul_11                              <built-in function mul>                                     (backbone_dark3_1_m_1_cv1_bn, sigmoid_11)                                        {}
call_module    backbone_dark3_1_m_1_cv2_conv       backbone.dark3.1.m.1.cv2.conv                               (mul_11,)                                                                        {}
call_module    backbone_dark3_1_m_1_cv2_bn         backbone.dark3.1.m.1.cv2.bn                                 (backbone_dark3_1_m_1_cv2_conv,)                                                 {}
call_function  sigmoid_12                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_1_cv2_bn,)                                                   {}
call_function  mul_12                              <built-in function mul>                                     (backbone_dark3_1_m_1_cv2_bn, sigmoid_12)                                        {}
call_function  add_2                               <built-in function add>                                     (add_1, mul_12)                                                                  {}
call_module    backbone_dark3_1_m_2_cv1_conv       backbone.dark3.1.m.2.cv1.conv                               (add_2,)                                                                         {}
call_module    backbone_dark3_1_m_2_cv1_bn         backbone.dark3.1.m.2.cv1.bn                                 (backbone_dark3_1_m_2_cv1_conv,)                                                 {}
call_function  sigmoid_13                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_2_cv1_bn,)                                                   {}
call_function  mul_13                              <built-in function mul>                                     (backbone_dark3_1_m_2_cv1_bn, sigmoid_13)                                        {}
call_module    backbone_dark3_1_m_2_cv2_conv       backbone.dark3.1.m.2.cv2.conv                               (mul_13,)                                                                        {}
call_module    backbone_dark3_1_m_2_cv2_bn         backbone.dark3.1.m.2.cv2.bn                                 (backbone_dark3_1_m_2_cv2_conv,)                                                 {}
call_function  sigmoid_14                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_m_2_cv2_bn,)                                                   {}
call_function  mul_14                              <built-in function mul>                                     (backbone_dark3_1_m_2_cv2_bn, sigmoid_14)                                        {}
call_function  add_3                               <built-in function add>                                     (add_2, mul_14)                                                                  {}
call_module    backbone_dark3_1_cv2_conv           backbone.dark3.1.cv2.conv                                   (mul_7,)                                                                         {}
call_module    backbone_dark3_1_cv2_bn             backbone.dark3.1.cv2.bn                                     (backbone_dark3_1_cv2_conv,)                                                     {}
call_function  sigmoid_15                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_cv2_bn,)                                                       {}
call_function  mul_15                              <built-in function mul>                                     (backbone_dark3_1_cv2_bn, sigmoid_15)                                            {}
call_function  cat_2                               <built-in method cat of type object at 0x7fbbec361940>      ((add_3, mul_15),)                                                               {'dim': 1}
call_module    backbone_dark3_1_cv3_conv           backbone.dark3.1.cv3.conv                                   (cat_2,)                                                                         {}
call_module    backbone_dark3_1_cv3_bn             backbone.dark3.1.cv3.bn                                     (backbone_dark3_1_cv3_conv,)                                                     {}
call_function  sigmoid_16                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark3_1_cv3_bn,)                                                       {}
call_function  mul_16                              <built-in function mul>                                     (backbone_dark3_1_cv3_bn, sigmoid_16)                                            {}
call_module    backbone_dark4_0_conv               backbone.dark4.0.conv                                       (mul_16,)                                                                        {}
call_module    backbone_dark4_0_bn                 backbone.dark4.0.bn                                         (backbone_dark4_0_conv,)                                                         {}
call_function  sigmoid_17                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_0_bn,)                                                           {}
call_function  mul_17                              <built-in function mul>                                     (backbone_dark4_0_bn, sigmoid_17)                                                {}
call_module    backbone_dark4_1_cv1_conv           backbone.dark4.1.cv1.conv                                   (mul_17,)                                                                        {}
call_module    backbone_dark4_1_cv1_bn             backbone.dark4.1.cv1.bn                                     (backbone_dark4_1_cv1_conv,)                                                     {}
call_function  sigmoid_18                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_cv1_bn,)                                                       {}
call_function  mul_18                              <built-in function mul>                                     (backbone_dark4_1_cv1_bn, sigmoid_18)                                            {}
call_module    backbone_dark4_1_m_0_cv1_conv       backbone.dark4.1.m.0.cv1.conv                               (mul_18,)                                                                        {}
call_module    backbone_dark4_1_m_0_cv1_bn         backbone.dark4.1.m.0.cv1.bn                                 (backbone_dark4_1_m_0_cv1_conv,)                                                 {}
call_function  sigmoid_19                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_0_cv1_bn,)                                                   {}
call_function  mul_19                              <built-in function mul>                                     (backbone_dark4_1_m_0_cv1_bn, sigmoid_19)                                        {}
call_module    backbone_dark4_1_m_0_cv2_conv       backbone.dark4.1.m.0.cv2.conv                               (mul_19,)                                                                        {}
call_module    backbone_dark4_1_m_0_cv2_bn         backbone.dark4.1.m.0.cv2.bn                                 (backbone_dark4_1_m_0_cv2_conv,)                                                 {}
call_function  sigmoid_20                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_0_cv2_bn,)                                                   {}
call_function  mul_20                              <built-in function mul>                                     (backbone_dark4_1_m_0_cv2_bn, sigmoid_20)                                        {}
call_function  add_4                               <built-in function add>                                     (mul_18, mul_20)                                                                 {}
call_module    backbone_dark4_1_m_1_cv1_conv       backbone.dark4.1.m.1.cv1.conv                               (add_4,)                                                                         {}
call_module    backbone_dark4_1_m_1_cv1_bn         backbone.dark4.1.m.1.cv1.bn                                 (backbone_dark4_1_m_1_cv1_conv,)                                                 {}
call_function  sigmoid_21                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_1_cv1_bn,)                                                   {}
call_function  mul_21                              <built-in function mul>                                     (backbone_dark4_1_m_1_cv1_bn, sigmoid_21)                                        {}
call_module    backbone_dark4_1_m_1_cv2_conv       backbone.dark4.1.m.1.cv2.conv                               (mul_21,)                                                                        {}
call_module    backbone_dark4_1_m_1_cv2_bn         backbone.dark4.1.m.1.cv2.bn                                 (backbone_dark4_1_m_1_cv2_conv,)                                                 {}
call_function  sigmoid_22                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_1_cv2_bn,)                                                   {}
call_function  mul_22                              <built-in function mul>                                     (backbone_dark4_1_m_1_cv2_bn, sigmoid_22)                                        {}
call_function  add_5                               <built-in function add>                                     (add_4, mul_22)                                                                  {}
call_module    backbone_dark4_1_m_2_cv1_conv       backbone.dark4.1.m.2.cv1.conv                               (add_5,)                                                                         {}
call_module    backbone_dark4_1_m_2_cv1_bn         backbone.dark4.1.m.2.cv1.bn                                 (backbone_dark4_1_m_2_cv1_conv,)                                                 {}
call_function  sigmoid_23                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_2_cv1_bn,)                                                   {}
call_function  mul_23                              <built-in function mul>                                     (backbone_dark4_1_m_2_cv1_bn, sigmoid_23)                                        {}
call_module    backbone_dark4_1_m_2_cv2_conv       backbone.dark4.1.m.2.cv2.conv                               (mul_23,)                                                                        {}
call_module    backbone_dark4_1_m_2_cv2_bn         backbone.dark4.1.m.2.cv2.bn                                 (backbone_dark4_1_m_2_cv2_conv,)                                                 {}
call_function  sigmoid_24                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_m_2_cv2_bn,)                                                   {}
call_function  mul_24                              <built-in function mul>                                     (backbone_dark4_1_m_2_cv2_bn, sigmoid_24)                                        {}
call_function  add_6                               <built-in function add>                                     (add_5, mul_24)                                                                  {}
call_module    backbone_dark4_1_cv2_conv           backbone.dark4.1.cv2.conv                                   (mul_17,)                                                                        {}
call_module    backbone_dark4_1_cv2_bn             backbone.dark4.1.cv2.bn                                     (backbone_dark4_1_cv2_conv,)                                                     {}
call_function  sigmoid_25                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_cv2_bn,)                                                       {}
call_function  mul_25                              <built-in function mul>                                     (backbone_dark4_1_cv2_bn, sigmoid_25)                                            {}
call_function  cat_3                               <built-in method cat of type object at 0x7fbbec361940>      ((add_6, mul_25),)                                                               {'dim': 1}
call_module    backbone_dark4_1_cv3_conv           backbone.dark4.1.cv3.conv                                   (cat_3,)                                                                         {}
call_module    backbone_dark4_1_cv3_bn             backbone.dark4.1.cv3.bn                                     (backbone_dark4_1_cv3_conv,)                                                     {}
call_function  sigmoid_26                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark4_1_cv3_bn,)                                                       {}
call_function  mul_26                              <built-in function mul>                                     (backbone_dark4_1_cv3_bn, sigmoid_26)                                            {}
call_module    backbone_dark5_0_conv               backbone.dark5.0.conv                                       (mul_26,)                                                                        {}
call_module    backbone_dark5_0_bn                 backbone.dark5.0.bn                                         (backbone_dark5_0_conv,)                                                         {}
call_function  sigmoid_27                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_0_bn,)                                                           {}
call_function  mul_27                              <built-in function mul>                                     (backbone_dark5_0_bn, sigmoid_27)                                                {}
call_module    backbone_dark5_1_cv1_conv           backbone.dark5.1.cv1.conv                                   (mul_27,)                                                                        {}
call_module    backbone_dark5_1_cv1_bn             backbone.dark5.1.cv1.bn                                     (backbone_dark5_1_cv1_conv,)                                                     {}
call_function  sigmoid_28                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_1_cv1_bn,)                                                       {}
call_function  mul_28                              <built-in function mul>                                     (backbone_dark5_1_cv1_bn, sigmoid_28)                                            {}
call_module    backbone_dark5_1_m_0                backbone.dark5.1.m.0                                        (mul_28,)                                                                        {}
call_module    backbone_dark5_1_m_1                backbone.dark5.1.m.1                                        (mul_28,)                                                                        {}
call_module    backbone_dark5_1_m_2                backbone.dark5.1.m.2                                        (mul_28,)                                                                        {}
call_function  cat_4                               <built-in method cat of type object at 0x7fbbec361940>      ([mul_28, backbone_dark5_1_m_0, backbone_dark5_1_m_1, backbone_dark5_1_m_2], 1)  {}
call_module    backbone_dark5_1_cv2_conv           backbone.dark5.1.cv2.conv                                   (cat_4,)                                                                         {}
call_module    backbone_dark5_1_cv2_bn             backbone.dark5.1.cv2.bn                                     (backbone_dark5_1_cv2_conv,)                                                     {}
call_function  sigmoid_29                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_1_cv2_bn,)                                                       {}
call_function  mul_29                              <built-in function mul>                                     (backbone_dark5_1_cv2_bn, sigmoid_29)                                            {}
call_module    backbone_dark5_2_cv1_conv           backbone.dark5.2.cv1.conv                                   (mul_29,)                                                                        {}
call_module    backbone_dark5_2_cv1_bn             backbone.dark5.2.cv1.bn                                     (backbone_dark5_2_cv1_conv,)                                                     {}
call_function  sigmoid_30                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_2_cv1_bn,)                                                       {}
call_function  mul_30                              <built-in function mul>                                     (backbone_dark5_2_cv1_bn, sigmoid_30)                                            {}
call_module    backbone_dark5_2_m_0_cv1_conv       backbone.dark5.2.m.0.cv1.conv                               (mul_30,)                                                                        {}
call_module    backbone_dark5_2_m_0_cv1_bn         backbone.dark5.2.m.0.cv1.bn                                 (backbone_dark5_2_m_0_cv1_conv,)                                                 {}
call_function  sigmoid_31                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_2_m_0_cv1_bn,)                                                   {}
call_function  mul_31                              <built-in function mul>                                     (backbone_dark5_2_m_0_cv1_bn, sigmoid_31)                                        {}
call_module    backbone_dark5_2_m_0_cv2_conv       backbone.dark5.2.m.0.cv2.conv                               (mul_31,)                                                                        {}
call_module    backbone_dark5_2_m_0_cv2_bn         backbone.dark5.2.m.0.cv2.bn                                 (backbone_dark5_2_m_0_cv2_conv,)                                                 {}
call_function  sigmoid_32                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_2_m_0_cv2_bn,)                                                   {}
call_function  mul_32                              <built-in function mul>                                     (backbone_dark5_2_m_0_cv2_bn, sigmoid_32)                                        {}
call_module    backbone_dark5_2_cv2_conv           backbone.dark5.2.cv2.conv                                   (mul_29,)                                                                        {}
call_module    backbone_dark5_2_cv2_bn             backbone.dark5.2.cv2.bn                                     (backbone_dark5_2_cv2_conv,)                                                     {}
call_function  sigmoid_33                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_2_cv2_bn,)                                                       {}
call_function  mul_33                              <built-in function mul>                                     (backbone_dark5_2_cv2_bn, sigmoid_33)                                            {}
call_function  cat_5                               <built-in method cat of type object at 0x7fbbec361940>      ((mul_32, mul_33),)                                                              {'dim': 1}
call_module    backbone_dark5_2_cv3_conv           backbone.dark5.2.cv3.conv                                   (cat_5,)                                                                         {}
call_module    backbone_dark5_2_cv3_bn             backbone.dark5.2.cv3.bn                                     (backbone_dark5_2_cv3_conv,)                                                     {}
call_function  sigmoid_34                          <built-in method sigmoid of type object at 0x7fbbec361940>  (backbone_dark5_2_cv3_bn,)                                                       {}
call_function  mul_34                              <built-in function mul>                                     (backbone_dark5_2_cv3_bn, sigmoid_34)                                            {}
call_module    conv_for_feat3_conv                 conv_for_feat3.conv                                         (mul_34,)                                                                        {}
call_module    conv_for_feat3_bn                   conv_for_feat3.bn                                           (conv_for_feat3_conv,)                                                           {}
call_function  sigmoid_35                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv_for_feat3_bn,)                                                             {}
call_function  mul_35                              <built-in function mul>                                     (conv_for_feat3_bn, sigmoid_35)                                                  {}
call_module    upsample                            upsample                                                    (mul_35,)                                                                        {}
call_function  cat_6                               <built-in method cat of type object at 0x7fbbec361940>      ([upsample, mul_26], 1)                                                          {}
call_module    conv3_for_upsample1_cv1_conv        conv3_for_upsample1.cv1.conv                                (cat_6,)                                                                         {}
call_module    conv3_for_upsample1_cv1_bn          conv3_for_upsample1.cv1.bn                                  (conv3_for_upsample1_cv1_conv,)                                                  {}
call_function  sigmoid_36                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample1_cv1_bn,)                                                    {}
call_function  mul_36                              <built-in function mul>                                     (conv3_for_upsample1_cv1_bn, sigmoid_36)                                         {}
call_module    conv3_for_upsample1_m_0_cv1_conv    conv3_for_upsample1.m.0.cv1.conv                            (mul_36,)                                                                        {}
call_module    conv3_for_upsample1_m_0_cv1_bn      conv3_for_upsample1.m.0.cv1.bn                              (conv3_for_upsample1_m_0_cv1_conv,)                                              {}
call_function  sigmoid_37                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample1_m_0_cv1_bn,)                                                {}
call_function  mul_37                              <built-in function mul>                                     (conv3_for_upsample1_m_0_cv1_bn, sigmoid_37)                                     {}
call_module    conv3_for_upsample1_m_0_cv2_conv    conv3_for_upsample1.m.0.cv2.conv                            (mul_37,)                                                                        {}
call_module    conv3_for_upsample1_m_0_cv2_bn      conv3_for_upsample1.m.0.cv2.bn                              (conv3_for_upsample1_m_0_cv2_conv,)                                              {}
call_function  sigmoid_38                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample1_m_0_cv2_bn,)                                                {}
call_function  mul_38                              <built-in function mul>                                     (conv3_for_upsample1_m_0_cv2_bn, sigmoid_38)                                     {}
call_module    conv3_for_upsample1_cv2_conv        conv3_for_upsample1.cv2.conv                                (cat_6,)                                                                         {}
call_module    conv3_for_upsample1_cv2_bn          conv3_for_upsample1.cv2.bn                                  (conv3_for_upsample1_cv2_conv,)                                                  {}
call_function  sigmoid_39                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample1_cv2_bn,)                                                    {}
call_function  mul_39                              <built-in function mul>                                     (conv3_for_upsample1_cv2_bn, sigmoid_39)                                         {}
call_function  cat_7                               <built-in method cat of type object at 0x7fbbec361940>      ((mul_38, mul_39),)                                                              {'dim': 1}
call_module    conv3_for_upsample1_cv3_conv        conv3_for_upsample1.cv3.conv                                (cat_7,)                                                                         {}
call_module    conv3_for_upsample1_cv3_bn          conv3_for_upsample1.cv3.bn                                  (conv3_for_upsample1_cv3_conv,)                                                  {}
call_function  sigmoid_40                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample1_cv3_bn,)                                                    {}
call_function  mul_40                              <built-in function mul>                                     (conv3_for_upsample1_cv3_bn, sigmoid_40)                                         {}
call_module    conv_for_feat2_conv                 conv_for_feat2.conv                                         (mul_40,)                                                                        {}
call_module    conv_for_feat2_bn                   conv_for_feat2.bn                                           (conv_for_feat2_conv,)                                                           {}
call_function  sigmoid_41                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv_for_feat2_bn,)                                                             {}
call_function  mul_41                              <built-in function mul>                                     (conv_for_feat2_bn, sigmoid_41)                                                  {}
call_module    upsample_1                          upsample                                                    (mul_41,)                                                                        {}
call_function  cat_8                               <built-in method cat of type object at 0x7fbbec361940>      ([upsample_1, mul_16], 1)                                                        {}
call_module    conv3_for_upsample2_cv1_conv        conv3_for_upsample2.cv1.conv                                (cat_8,)                                                                         {}
call_module    conv3_for_upsample2_cv1_bn          conv3_for_upsample2.cv1.bn                                  (conv3_for_upsample2_cv1_conv,)                                                  {}
call_function  sigmoid_42                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample2_cv1_bn,)                                                    {}
call_function  mul_42                              <built-in function mul>                                     (conv3_for_upsample2_cv1_bn, sigmoid_42)                                         {}
call_module    conv3_for_upsample2_m_0_cv1_conv    conv3_for_upsample2.m.0.cv1.conv                            (mul_42,)                                                                        {}
call_module    conv3_for_upsample2_m_0_cv1_bn      conv3_for_upsample2.m.0.cv1.bn                              (conv3_for_upsample2_m_0_cv1_conv,)                                              {}
call_function  sigmoid_43                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample2_m_0_cv1_bn,)                                                {}
call_function  mul_43                              <built-in function mul>                                     (conv3_for_upsample2_m_0_cv1_bn, sigmoid_43)                                     {}
call_module    conv3_for_upsample2_m_0_cv2_conv    conv3_for_upsample2.m.0.cv2.conv                            (mul_43,)                                                                        {}
call_module    conv3_for_upsample2_m_0_cv2_bn      conv3_for_upsample2.m.0.cv2.bn                              (conv3_for_upsample2_m_0_cv2_conv,)                                              {}
call_function  sigmoid_44                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample2_m_0_cv2_bn,)                                                {}
call_function  mul_44                              <built-in function mul>                                     (conv3_for_upsample2_m_0_cv2_bn, sigmoid_44)                                     {}
call_module    conv3_for_upsample2_cv2_conv        conv3_for_upsample2.cv2.conv                                (cat_8,)                                                                         {}
call_module    conv3_for_upsample2_cv2_bn          conv3_for_upsample2.cv2.bn                                  (conv3_for_upsample2_cv2_conv,)                                                  {}
call_function  sigmoid_45                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample2_cv2_bn,)                                                    {}
call_function  mul_45                              <built-in function mul>                                     (conv3_for_upsample2_cv2_bn, sigmoid_45)                                         {}
call_function  cat_9                               <built-in method cat of type object at 0x7fbbec361940>      ((mul_44, mul_45),)                                                              {'dim': 1}
call_module    conv3_for_upsample2_cv3_conv        conv3_for_upsample2.cv3.conv                                (cat_9,)                                                                         {}
call_module    conv3_for_upsample2_cv3_bn          conv3_for_upsample2.cv3.bn                                  (conv3_for_upsample2_cv3_conv,)                                                  {}
call_function  sigmoid_46                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_upsample2_cv3_bn,)                                                    {}
call_function  mul_46                              <built-in function mul>                                     (conv3_for_upsample2_cv3_bn, sigmoid_46)                                         {}
call_module    down_sample1_conv                   down_sample1.conv                                           (mul_46,)                                                                        {}
call_module    down_sample1_bn                     down_sample1.bn                                             (down_sample1_conv,)                                                             {}
call_function  sigmoid_47                          <built-in method sigmoid of type object at 0x7fbbec361940>  (down_sample1_bn,)                                                               {}
call_function  mul_47                              <built-in function mul>                                     (down_sample1_bn, sigmoid_47)                                                    {}
call_function  cat_10                              <built-in method cat of type object at 0x7fbbec361940>      ([mul_47, mul_41], 1)                                                            {}
call_module    conv3_for_downsample1_cv1_conv      conv3_for_downsample1.cv1.conv                              (cat_10,)                                                                        {}
call_module    conv3_for_downsample1_cv1_bn        conv3_for_downsample1.cv1.bn                                (conv3_for_downsample1_cv1_conv,)                                                {}
call_function  sigmoid_48                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample1_cv1_bn,)                                                  {}
call_function  mul_48                              <built-in function mul>                                     (conv3_for_downsample1_cv1_bn, sigmoid_48)                                       {}
call_module    conv3_for_downsample1_m_0_cv1_conv  conv3_for_downsample1.m.0.cv1.conv                          (mul_48,)                                                                        {}
call_module    conv3_for_downsample1_m_0_cv1_bn    conv3_for_downsample1.m.0.cv1.bn                            (conv3_for_downsample1_m_0_cv1_conv,)                                            {}
call_function  sigmoid_49                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample1_m_0_cv1_bn,)                                              {}
call_function  mul_49                              <built-in function mul>                                     (conv3_for_downsample1_m_0_cv1_bn, sigmoid_49)                                   {}
call_module    conv3_for_downsample1_m_0_cv2_conv  conv3_for_downsample1.m.0.cv2.conv                          (mul_49,)                                                                        {}
call_module    conv3_for_downsample1_m_0_cv2_bn    conv3_for_downsample1.m.0.cv2.bn                            (conv3_for_downsample1_m_0_cv2_conv,)                                            {}
call_function  sigmoid_50                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample1_m_0_cv2_bn,)                                              {}
call_function  mul_50                              <built-in function mul>                                     (conv3_for_downsample1_m_0_cv2_bn, sigmoid_50)                                   {}
call_module    conv3_for_downsample1_cv2_conv      conv3_for_downsample1.cv2.conv                              (cat_10,)                                                                        {}
call_module    conv3_for_downsample1_cv2_bn        conv3_for_downsample1.cv2.bn                                (conv3_for_downsample1_cv2_conv,)                                                {}
call_function  sigmoid_51                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample1_cv2_bn,)                                                  {}
call_function  mul_51                              <built-in function mul>                                     (conv3_for_downsample1_cv2_bn, sigmoid_51)                                       {}
call_function  cat_11                              <built-in method cat of type object at 0x7fbbec361940>      ((mul_50, mul_51),)                                                              {'dim': 1}
call_module    conv3_for_downsample1_cv3_conv      conv3_for_downsample1.cv3.conv                              (cat_11,)                                                                        {}
call_module    conv3_for_downsample1_cv3_bn        conv3_for_downsample1.cv3.bn                                (conv3_for_downsample1_cv3_conv,)                                                {}
call_function  sigmoid_52                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample1_cv3_bn,)                                                  {}
call_function  mul_52                              <built-in function mul>                                     (conv3_for_downsample1_cv3_bn, sigmoid_52)                                       {}
call_module    down_sample2_conv                   down_sample2.conv                                           (mul_52,)                                                                        {}
call_module    down_sample2_bn                     down_sample2.bn                                             (down_sample2_conv,)                                                             {}
call_function  sigmoid_53                          <built-in method sigmoid of type object at 0x7fbbec361940>  (down_sample2_bn,)                                                               {}
call_function  mul_53                              <built-in function mul>                                     (down_sample2_bn, sigmoid_53)                                                    {}
call_function  cat_12                              <built-in method cat of type object at 0x7fbbec361940>      ([mul_53, mul_35], 1)                                                            {}
call_module    conv3_for_downsample2_cv1_conv      conv3_for_downsample2.cv1.conv                              (cat_12,)                                                                        {}
call_module    conv3_for_downsample2_cv1_bn        conv3_for_downsample2.cv1.bn                                (conv3_for_downsample2_cv1_conv,)                                                {}
call_function  sigmoid_54                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample2_cv1_bn,)                                                  {}
call_function  mul_54                              <built-in function mul>                                     (conv3_for_downsample2_cv1_bn, sigmoid_54)                                       {}
call_module    conv3_for_downsample2_m_0_cv1_conv  conv3_for_downsample2.m.0.cv1.conv                          (mul_54,)                                                                        {}
call_module    conv3_for_downsample2_m_0_cv1_bn    conv3_for_downsample2.m.0.cv1.bn                            (conv3_for_downsample2_m_0_cv1_conv,)                                            {}
call_function  sigmoid_55                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample2_m_0_cv1_bn,)                                              {}
call_function  mul_55                              <built-in function mul>                                     (conv3_for_downsample2_m_0_cv1_bn, sigmoid_55)                                   {}
call_module    conv3_for_downsample2_m_0_cv2_conv  conv3_for_downsample2.m.0.cv2.conv                          (mul_55,)                                                                        {}
call_module    conv3_for_downsample2_m_0_cv2_bn    conv3_for_downsample2.m.0.cv2.bn                            (conv3_for_downsample2_m_0_cv2_conv,)                                            {}
call_function  sigmoid_56                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample2_m_0_cv2_bn,)                                              {}
call_function  mul_56                              <built-in function mul>                                     (conv3_for_downsample2_m_0_cv2_bn, sigmoid_56)                                   {}
call_module    conv3_for_downsample2_cv2_conv      conv3_for_downsample2.cv2.conv                              (cat_12,)                                                                        {}
call_module    conv3_for_downsample2_cv2_bn        conv3_for_downsample2.cv2.bn                                (conv3_for_downsample2_cv2_conv,)                                                {}
call_function  sigmoid_57                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample2_cv2_bn,)                                                  {}
call_function  mul_57                              <built-in function mul>                                     (conv3_for_downsample2_cv2_bn, sigmoid_57)                                       {}
call_function  cat_13                              <built-in method cat of type object at 0x7fbbec361940>      ((mul_56, mul_57),)                                                              {'dim': 1}
call_module    conv3_for_downsample2_cv3_conv      conv3_for_downsample2.cv3.conv                              (cat_13,)                                                                        {}
call_module    conv3_for_downsample2_cv3_bn        conv3_for_downsample2.cv3.bn                                (conv3_for_downsample2_cv3_conv,)                                                {}
call_function  sigmoid_58                          <built-in method sigmoid of type object at 0x7fbbec361940>  (conv3_for_downsample2_cv3_bn,)                                                  {}
call_function  mul_58                              <built-in function mul>                                     (conv3_for_downsample2_cv3_bn, sigmoid_58)                                       {}
call_module    yolo_head_p3                        yolo_head_P3                                                (mul_46,)                                                                        {}
call_module    yolo_head_p4                        yolo_head_P4                                                (mul_52,)                                                                        {}
call_module    yolo_head_p5                        yolo_head_P5                                                (mul_58,)                                                                        {}
output         output                              output                                                      ((yolo_head_p5, yolo_head_p4, yolo_head_p3),)                                    {}

[build_fx_graph] Print the children and parents relationship for each layer
[build_fx_graph] This is the 'input' node: x
[build_fx_graph] This is the 'call_function' node: getitem, its parent list: ['x'], its children list: ['cat']
[build_fx_graph] This is the 'call_function' node: getitem.1, its parent list: ['x'], its children list: ['cat']
[build_fx_graph] This is the 'call_function' node: getitem.2, its parent list: ['x'], its children list: ['cat']
[build_fx_graph] This is the 'call_function' node: getitem.3, its parent list: ['x'], its children list: ['cat']
[build_fx_graph] This is the 'call_function' node: cat, its parent list: ['getitem', 'getitem.1', 'getitem.2', 'getitem.3'], its children list: ['backbone.stem.conv.conv']
[build_fx_graph] This is the 'call_module' node: backbone.stem.conv.conv, its parent list: ['cat'], its children list: ['backbone.stem.conv.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.stem.conv.bn, its parent list: ['backbone.stem.conv.conv'], its children list: ['sigmoid', 'mul'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid, its parent list: ['backbone.stem.conv.bn'], its children list: ['mul']
[build_fx_graph] This is the 'call_function' node: mul, its parent list: ['backbone.stem.conv.bn', 'sigmoid'], its children list: ['backbone.dark2.0.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.0.conv, its parent list: ['mul'], its children list: ['backbone.dark2.0.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.0.bn, its parent list: ['backbone.dark2.0.conv'], its children list: ['sigmoid.1', 'mul.1'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.1, its parent list: ['backbone.dark2.0.bn'], its children list: ['mul.1']
[build_fx_graph] This is the 'call_function' node: mul.1, its parent list: ['backbone.dark2.0.bn', 'sigmoid.1'], its children list: ['backbone.dark2.1.cv1.conv', 'backbone.dark2.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv1.conv, its parent list: ['mul.1'], its children list: ['backbone.dark2.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv1.bn, its parent list: ['backbone.dark2.1.cv1.conv'], its children list: ['sigmoid.2', 'mul.2'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.2, its parent list: ['backbone.dark2.1.cv1.bn'], its children list: ['mul.2']
[build_fx_graph] This is the 'call_function' node: mul.2, its parent list: ['backbone.dark2.1.cv1.bn', 'sigmoid.2'], its children list: ['backbone.dark2.1.m.0.cv1.conv', 'add']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.m.0.cv1.conv, its parent list: ['mul.2'], its children list: ['backbone.dark2.1.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.m.0.cv1.bn, its parent list: ['backbone.dark2.1.m.0.cv1.conv'], its children list: ['sigmoid.3', 'mul.3'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.3, its parent list: ['backbone.dark2.1.m.0.cv1.bn'], its children list: ['mul.3']
[build_fx_graph] This is the 'call_function' node: mul.3, its parent list: ['backbone.dark2.1.m.0.cv1.bn', 'sigmoid.3'], its children list: ['backbone.dark2.1.m.0.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.m.0.cv2.conv, its parent list: ['mul.3'], its children list: ['backbone.dark2.1.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.m.0.cv2.bn, its parent list: ['backbone.dark2.1.m.0.cv2.conv'], its children list: ['sigmoid.4', 'mul.4'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.4, its parent list: ['backbone.dark2.1.m.0.cv2.bn'], its children list: ['mul.4']
[build_fx_graph] This is the 'call_function' node: mul.4, its parent list: ['backbone.dark2.1.m.0.cv2.bn', 'sigmoid.4'], its children list: ['add']
[build_fx_graph] This is the 'call_function' node: add, its parent list: ['mul.2', 'mul.4'], its children list: ['cat.1']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv2.conv, its parent list: ['mul.1'], its children list: ['backbone.dark2.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv2.bn, its parent list: ['backbone.dark2.1.cv2.conv'], its children list: ['sigmoid.5', 'mul.5'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.5, its parent list: ['backbone.dark2.1.cv2.bn'], its children list: ['mul.5']
[build_fx_graph] This is the 'call_function' node: mul.5, its parent list: ['backbone.dark2.1.cv2.bn', 'sigmoid.5'], its children list: ['cat.1']
[build_fx_graph] This is the 'call_function' node: cat.1, its parent list: ['add', 'mul.5'], its children list: ['backbone.dark2.1.cv3.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv3.conv, its parent list: ['cat.1'], its children list: ['backbone.dark2.1.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark2.1.cv3.bn, its parent list: ['backbone.dark2.1.cv3.conv'], its children list: ['sigmoid.6', 'mul.6'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.6, its parent list: ['backbone.dark2.1.cv3.bn'], its children list: ['mul.6']
[build_fx_graph] This is the 'call_function' node: mul.6, its parent list: ['backbone.dark2.1.cv3.bn', 'sigmoid.6'], its children list: ['backbone.dark3.0.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.0.conv, its parent list: ['mul.6'], its children list: ['backbone.dark3.0.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.0.bn, its parent list: ['backbone.dark3.0.conv'], its children list: ['sigmoid.7', 'mul.7'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.7, its parent list: ['backbone.dark3.0.bn'], its children list: ['mul.7']
[build_fx_graph] This is the 'call_function' node: mul.7, its parent list: ['backbone.dark3.0.bn', 'sigmoid.7'], its children list: ['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv1.conv, its parent list: ['mul.7'], its children list: ['backbone.dark3.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv1.bn, its parent list: ['backbone.dark3.1.cv1.conv'], its children list: ['sigmoid.8', 'mul.8'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.8, its parent list: ['backbone.dark3.1.cv1.bn'], its children list: ['mul.8']
[build_fx_graph] This is the 'call_function' node: mul.8, its parent list: ['backbone.dark3.1.cv1.bn', 'sigmoid.8'], its children list: ['backbone.dark3.1.m.0.cv1.conv', 'add.1']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.0.cv1.conv, its parent list: ['mul.8'], its children list: ['backbone.dark3.1.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.0.cv1.bn, its parent list: ['backbone.dark3.1.m.0.cv1.conv'], its children list: ['sigmoid.9', 'mul.9'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.9, its parent list: ['backbone.dark3.1.m.0.cv1.bn'], its children list: ['mul.9']
[build_fx_graph] This is the 'call_function' node: mul.9, its parent list: ['backbone.dark3.1.m.0.cv1.bn', 'sigmoid.9'], its children list: ['backbone.dark3.1.m.0.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.0.cv2.conv, its parent list: ['mul.9'], its children list: ['backbone.dark3.1.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.0.cv2.bn, its parent list: ['backbone.dark3.1.m.0.cv2.conv'], its children list: ['sigmoid.10', 'mul.10'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.10, its parent list: ['backbone.dark3.1.m.0.cv2.bn'], its children list: ['mul.10']
[build_fx_graph] This is the 'call_function' node: mul.10, its parent list: ['backbone.dark3.1.m.0.cv2.bn', 'sigmoid.10'], its children list: ['add.1']
[build_fx_graph] This is the 'call_function' node: add.1, its parent list: ['mul.8', 'mul.10'], its children list: ['backbone.dark3.1.m.1.cv1.conv', 'add.2']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.1.cv1.conv, its parent list: ['add.1'], its children list: ['backbone.dark3.1.m.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.1.cv1.bn, its parent list: ['backbone.dark3.1.m.1.cv1.conv'], its children list: ['sigmoid.11', 'mul.11'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.11, its parent list: ['backbone.dark3.1.m.1.cv1.bn'], its children list: ['mul.11']
[build_fx_graph] This is the 'call_function' node: mul.11, its parent list: ['backbone.dark3.1.m.1.cv1.bn', 'sigmoid.11'], its children list: ['backbone.dark3.1.m.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.1.cv2.conv, its parent list: ['mul.11'], its children list: ['backbone.dark3.1.m.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.1.cv2.bn, its parent list: ['backbone.dark3.1.m.1.cv2.conv'], its children list: ['sigmoid.12', 'mul.12'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.12, its parent list: ['backbone.dark3.1.m.1.cv2.bn'], its children list: ['mul.12']
[build_fx_graph] This is the 'call_function' node: mul.12, its parent list: ['backbone.dark3.1.m.1.cv2.bn', 'sigmoid.12'], its children list: ['add.2']
[build_fx_graph] This is the 'call_function' node: add.2, its parent list: ['add.1', 'mul.12'], its children list: ['backbone.dark3.1.m.2.cv1.conv', 'add.3']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.2.cv1.conv, its parent list: ['add.2'], its children list: ['backbone.dark3.1.m.2.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.2.cv1.bn, its parent list: ['backbone.dark3.1.m.2.cv1.conv'], its children list: ['sigmoid.13', 'mul.13'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.13, its parent list: ['backbone.dark3.1.m.2.cv1.bn'], its children list: ['mul.13']
[build_fx_graph] This is the 'call_function' node: mul.13, its parent list: ['backbone.dark3.1.m.2.cv1.bn', 'sigmoid.13'], its children list: ['backbone.dark3.1.m.2.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.2.cv2.conv, its parent list: ['mul.13'], its children list: ['backbone.dark3.1.m.2.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.m.2.cv2.bn, its parent list: ['backbone.dark3.1.m.2.cv2.conv'], its children list: ['sigmoid.14', 'mul.14'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.14, its parent list: ['backbone.dark3.1.m.2.cv2.bn'], its children list: ['mul.14']
[build_fx_graph] This is the 'call_function' node: mul.14, its parent list: ['backbone.dark3.1.m.2.cv2.bn', 'sigmoid.14'], its children list: ['add.3']
[build_fx_graph] This is the 'call_function' node: add.3, its parent list: ['add.2', 'mul.14'], its children list: ['cat.2']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv2.conv, its parent list: ['mul.7'], its children list: ['backbone.dark3.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv2.bn, its parent list: ['backbone.dark3.1.cv2.conv'], its children list: ['sigmoid.15', 'mul.15'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.15, its parent list: ['backbone.dark3.1.cv2.bn'], its children list: ['mul.15']
[build_fx_graph] This is the 'call_function' node: mul.15, its parent list: ['backbone.dark3.1.cv2.bn', 'sigmoid.15'], its children list: ['cat.2']
[build_fx_graph] This is the 'call_function' node: cat.2, its parent list: ['add.3', 'mul.15'], its children list: ['backbone.dark3.1.cv3.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv3.conv, its parent list: ['cat.2'], its children list: ['backbone.dark3.1.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark3.1.cv3.bn, its parent list: ['backbone.dark3.1.cv3.conv'], its children list: ['sigmoid.16', 'mul.16'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.16, its parent list: ['backbone.dark3.1.cv3.bn'], its children list: ['mul.16']
[build_fx_graph] This is the 'call_function' node: mul.16, its parent list: ['backbone.dark3.1.cv3.bn', 'sigmoid.16'], its children list: ['backbone.dark4.0.conv', 'cat.8']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.0.conv, its parent list: ['mul.16'], its children list: ['backbone.dark4.0.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.0.bn, its parent list: ['backbone.dark4.0.conv'], its children list: ['sigmoid.17', 'mul.17'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.17, its parent list: ['backbone.dark4.0.bn'], its children list: ['mul.17']
[build_fx_graph] This is the 'call_function' node: mul.17, its parent list: ['backbone.dark4.0.bn', 'sigmoid.17'], its children list: ['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv1.conv, its parent list: ['mul.17'], its children list: ['backbone.dark4.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv1.bn, its parent list: ['backbone.dark4.1.cv1.conv'], its children list: ['sigmoid.18', 'mul.18'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.18, its parent list: ['backbone.dark4.1.cv1.bn'], its children list: ['mul.18']
[build_fx_graph] This is the 'call_function' node: mul.18, its parent list: ['backbone.dark4.1.cv1.bn', 'sigmoid.18'], its children list: ['backbone.dark4.1.m.0.cv1.conv', 'add.4']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.0.cv1.conv, its parent list: ['mul.18'], its children list: ['backbone.dark4.1.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.0.cv1.bn, its parent list: ['backbone.dark4.1.m.0.cv1.conv'], its children list: ['sigmoid.19', 'mul.19'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.19, its parent list: ['backbone.dark4.1.m.0.cv1.bn'], its children list: ['mul.19']
[build_fx_graph] This is the 'call_function' node: mul.19, its parent list: ['backbone.dark4.1.m.0.cv1.bn', 'sigmoid.19'], its children list: ['backbone.dark4.1.m.0.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.0.cv2.conv, its parent list: ['mul.19'], its children list: ['backbone.dark4.1.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.0.cv2.bn, its parent list: ['backbone.dark4.1.m.0.cv2.conv'], its children list: ['sigmoid.20', 'mul.20'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.20, its parent list: ['backbone.dark4.1.m.0.cv2.bn'], its children list: ['mul.20']
[build_fx_graph] This is the 'call_function' node: mul.20, its parent list: ['backbone.dark4.1.m.0.cv2.bn', 'sigmoid.20'], its children list: ['add.4']
[build_fx_graph] This is the 'call_function' node: add.4, its parent list: ['mul.18', 'mul.20'], its children list: ['backbone.dark4.1.m.1.cv1.conv', 'add.5']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.1.cv1.conv, its parent list: ['add.4'], its children list: ['backbone.dark4.1.m.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.1.cv1.bn, its parent list: ['backbone.dark4.1.m.1.cv1.conv'], its children list: ['sigmoid.21', 'mul.21'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.21, its parent list: ['backbone.dark4.1.m.1.cv1.bn'], its children list: ['mul.21']
[build_fx_graph] This is the 'call_function' node: mul.21, its parent list: ['backbone.dark4.1.m.1.cv1.bn', 'sigmoid.21'], its children list: ['backbone.dark4.1.m.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.1.cv2.conv, its parent list: ['mul.21'], its children list: ['backbone.dark4.1.m.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.1.cv2.bn, its parent list: ['backbone.dark4.1.m.1.cv2.conv'], its children list: ['sigmoid.22', 'mul.22'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.22, its parent list: ['backbone.dark4.1.m.1.cv2.bn'], its children list: ['mul.22']
[build_fx_graph] This is the 'call_function' node: mul.22, its parent list: ['backbone.dark4.1.m.1.cv2.bn', 'sigmoid.22'], its children list: ['add.5']
[build_fx_graph] This is the 'call_function' node: add.5, its parent list: ['add.4', 'mul.22'], its children list: ['backbone.dark4.1.m.2.cv1.conv', 'add.6']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.2.cv1.conv, its parent list: ['add.5'], its children list: ['backbone.dark4.1.m.2.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.2.cv1.bn, its parent list: ['backbone.dark4.1.m.2.cv1.conv'], its children list: ['sigmoid.23', 'mul.23'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.23, its parent list: ['backbone.dark4.1.m.2.cv1.bn'], its children list: ['mul.23']
[build_fx_graph] This is the 'call_function' node: mul.23, its parent list: ['backbone.dark4.1.m.2.cv1.bn', 'sigmoid.23'], its children list: ['backbone.dark4.1.m.2.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.2.cv2.conv, its parent list: ['mul.23'], its children list: ['backbone.dark4.1.m.2.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.m.2.cv2.bn, its parent list: ['backbone.dark4.1.m.2.cv2.conv'], its children list: ['sigmoid.24', 'mul.24'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.24, its parent list: ['backbone.dark4.1.m.2.cv2.bn'], its children list: ['mul.24']
[build_fx_graph] This is the 'call_function' node: mul.24, its parent list: ['backbone.dark4.1.m.2.cv2.bn', 'sigmoid.24'], its children list: ['add.6']
[build_fx_graph] This is the 'call_function' node: add.6, its parent list: ['add.5', 'mul.24'], its children list: ['cat.3']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv2.conv, its parent list: ['mul.17'], its children list: ['backbone.dark4.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv2.bn, its parent list: ['backbone.dark4.1.cv2.conv'], its children list: ['sigmoid.25', 'mul.25'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.25, its parent list: ['backbone.dark4.1.cv2.bn'], its children list: ['mul.25']
[build_fx_graph] This is the 'call_function' node: mul.25, its parent list: ['backbone.dark4.1.cv2.bn', 'sigmoid.25'], its children list: ['cat.3']
[build_fx_graph] This is the 'call_function' node: cat.3, its parent list: ['add.6', 'mul.25'], its children list: ['backbone.dark4.1.cv3.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv3.conv, its parent list: ['cat.3'], its children list: ['backbone.dark4.1.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark4.1.cv3.bn, its parent list: ['backbone.dark4.1.cv3.conv'], its children list: ['sigmoid.26', 'mul.26'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.26, its parent list: ['backbone.dark4.1.cv3.bn'], its children list: ['mul.26']
[build_fx_graph] This is the 'call_function' node: mul.26, its parent list: ['backbone.dark4.1.cv3.bn', 'sigmoid.26'], its children list: ['backbone.dark5.0.conv', 'cat.6']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.0.conv, its parent list: ['mul.26'], its children list: ['backbone.dark5.0.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.0.bn, its parent list: ['backbone.dark5.0.conv'], its children list: ['sigmoid.27', 'mul.27'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.27, its parent list: ['backbone.dark5.0.bn'], its children list: ['mul.27']
[build_fx_graph] This is the 'call_function' node: mul.27, its parent list: ['backbone.dark5.0.bn', 'sigmoid.27'], its children list: ['backbone.dark5.1.cv1.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.cv1.conv, its parent list: ['mul.27'], its children list: ['backbone.dark5.1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.cv1.bn, its parent list: ['backbone.dark5.1.cv1.conv'], its children list: ['sigmoid.28', 'mul.28'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.28, its parent list: ['backbone.dark5.1.cv1.bn'], its children list: ['mul.28']
[build_fx_graph] This is the 'call_function' node: mul.28, its parent list: ['backbone.dark5.1.cv1.bn', 'sigmoid.28'], its children list: ['backbone.dark5.1.m.0', 'backbone.dark5.1.m.1', 'backbone.dark5.1.m.2', 'cat.4']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.m.0, its parent list: ['mul.28'], its children list: ['cat.4'], its type: torch.nn.modules.pooling.MaxPool2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.m.1, its parent list: ['mul.28'], its children list: ['cat.4'], its type: torch.nn.modules.pooling.MaxPool2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.m.2, its parent list: ['mul.28'], its children list: ['cat.4'], its type: torch.nn.modules.pooling.MaxPool2d
[build_fx_graph] This is the 'call_function' node: cat.4, its parent list: ['mul.28', 'backbone.dark5.1.m.0', 'backbone.dark5.1.m.1', 'backbone.dark5.1.m.2'], its children list: ['backbone.dark5.1.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.cv2.conv, its parent list: ['cat.4'], its children list: ['backbone.dark5.1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.1.cv2.bn, its parent list: ['backbone.dark5.1.cv2.conv'], its children list: ['sigmoid.29', 'mul.29'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.29, its parent list: ['backbone.dark5.1.cv2.bn'], its children list: ['mul.29']
[build_fx_graph] This is the 'call_function' node: mul.29, its parent list: ['backbone.dark5.1.cv2.bn', 'sigmoid.29'], its children list: ['backbone.dark5.2.cv1.conv', 'backbone.dark5.2.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv1.conv, its parent list: ['mul.29'], its children list: ['backbone.dark5.2.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv1.bn, its parent list: ['backbone.dark5.2.cv1.conv'], its children list: ['sigmoid.30', 'mul.30'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.30, its parent list: ['backbone.dark5.2.cv1.bn'], its children list: ['mul.30']
[build_fx_graph] This is the 'call_function' node: mul.30, its parent list: ['backbone.dark5.2.cv1.bn', 'sigmoid.30'], its children list: ['backbone.dark5.2.m.0.cv1.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.m.0.cv1.conv, its parent list: ['mul.30'], its children list: ['backbone.dark5.2.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.m.0.cv1.bn, its parent list: ['backbone.dark5.2.m.0.cv1.conv'], its children list: ['sigmoid.31', 'mul.31'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.31, its parent list: ['backbone.dark5.2.m.0.cv1.bn'], its children list: ['mul.31']
[build_fx_graph] This is the 'call_function' node: mul.31, its parent list: ['backbone.dark5.2.m.0.cv1.bn', 'sigmoid.31'], its children list: ['backbone.dark5.2.m.0.cv2.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.m.0.cv2.conv, its parent list: ['mul.31'], its children list: ['backbone.dark5.2.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.m.0.cv2.bn, its parent list: ['backbone.dark5.2.m.0.cv2.conv'], its children list: ['sigmoid.32', 'mul.32'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.32, its parent list: ['backbone.dark5.2.m.0.cv2.bn'], its children list: ['mul.32']
[build_fx_graph] This is the 'call_function' node: mul.32, its parent list: ['backbone.dark5.2.m.0.cv2.bn', 'sigmoid.32'], its children list: ['cat.5']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv2.conv, its parent list: ['mul.29'], its children list: ['backbone.dark5.2.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv2.bn, its parent list: ['backbone.dark5.2.cv2.conv'], its children list: ['sigmoid.33', 'mul.33'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.33, its parent list: ['backbone.dark5.2.cv2.bn'], its children list: ['mul.33']
[build_fx_graph] This is the 'call_function' node: mul.33, its parent list: ['backbone.dark5.2.cv2.bn', 'sigmoid.33'], its children list: ['cat.5']
[build_fx_graph] This is the 'call_function' node: cat.5, its parent list: ['mul.32', 'mul.33'], its children list: ['backbone.dark5.2.cv3.conv']
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv3.conv, its parent list: ['cat.5'], its children list: ['backbone.dark5.2.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'call_module' node: backbone.dark5.2.cv3.bn, its parent list: ['backbone.dark5.2.cv3.conv'], its children list: ['sigmoid.34', 'mul.34'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.34, its parent list: ['backbone.dark5.2.cv3.bn'], its children list: ['mul.34']
[build_fx_graph] This is the 'call_function' node: mul.34, its parent list: ['backbone.dark5.2.cv3.bn', 'sigmoid.34'], its children list: ['conv.for.feat3.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv_for_feat3.conv', the manually converted node name is 'conv.for.feat3.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv.for.feat3.conv, its parent list: ['mul.34'], its children list: ['conv.for.feat3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv_for_feat3.bn', the manually converted node name is 'conv.for.feat3.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv.for.feat3.bn, its parent list: ['conv.for.feat3.conv'], its children list: ['sigmoid.35', 'mul.35'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.35, its parent list: ['conv.for.feat3.bn'], its children list: ['mul.35']
[build_fx_graph] This is the 'call_function' node: mul.35, its parent list: ['conv.for.feat3.bn', 'sigmoid.35'], its children list: ['upsample', 'cat.12']
[build_fx_graph] This is the 'call_module' node: upsample, its parent list: ['mul.35'], its children list: ['cat.6'], its type: torch.nn.modules.upsampling.Upsample
[build_fx_graph] This is the 'call_function' node: cat.6, its parent list: ['upsample', 'mul.26'], its children list: ['conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv1.conv', the manually converted node name is 'conv3.for.upsample1.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv1.conv, its parent list: ['cat.6'], its children list: ['conv3.for.upsample1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv1.bn', the manually converted node name is 'conv3.for.upsample1.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv1.bn, its parent list: ['conv3.for.upsample1.cv1.conv'], its children list: ['sigmoid.36', 'mul.36'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.36, its parent list: ['conv3.for.upsample1.cv1.bn'], its children list: ['mul.36']
[build_fx_graph] This is the 'call_function' node: mul.36, its parent list: ['conv3.for.upsample1.cv1.bn', 'sigmoid.36'], its children list: ['conv3.for.upsample1.m.0.cv1.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.m.0.cv1.conv', the manually converted node name is 'conv3.for.upsample1.m.0.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.m.0.cv1.conv, its parent list: ['mul.36'], its children list: ['conv3.for.upsample1.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.m.0.cv1.bn', the manually converted node name is 'conv3.for.upsample1.m.0.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.m.0.cv1.bn, its parent list: ['conv3.for.upsample1.m.0.cv1.conv'], its children list: ['sigmoid.37', 'mul.37'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.37, its parent list: ['conv3.for.upsample1.m.0.cv1.bn'], its children list: ['mul.37']
[build_fx_graph] This is the 'call_function' node: mul.37, its parent list: ['conv3.for.upsample1.m.0.cv1.bn', 'sigmoid.37'], its children list: ['conv3.for.upsample1.m.0.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.m.0.cv2.conv', the manually converted node name is 'conv3.for.upsample1.m.0.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.m.0.cv2.conv, its parent list: ['mul.37'], its children list: ['conv3.for.upsample1.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.m.0.cv2.bn', the manually converted node name is 'conv3.for.upsample1.m.0.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.m.0.cv2.bn, its parent list: ['conv3.for.upsample1.m.0.cv2.conv'], its children list: ['sigmoid.38', 'mul.38'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.38, its parent list: ['conv3.for.upsample1.m.0.cv2.bn'], its children list: ['mul.38']
[build_fx_graph] This is the 'call_function' node: mul.38, its parent list: ['conv3.for.upsample1.m.0.cv2.bn', 'sigmoid.38'], its children list: ['cat.7']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv2.conv', the manually converted node name is 'conv3.for.upsample1.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv2.conv, its parent list: ['cat.6'], its children list: ['conv3.for.upsample1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv2.bn', the manually converted node name is 'conv3.for.upsample1.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv2.bn, its parent list: ['conv3.for.upsample1.cv2.conv'], its children list: ['sigmoid.39', 'mul.39'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.39, its parent list: ['conv3.for.upsample1.cv2.bn'], its children list: ['mul.39']
[build_fx_graph] This is the 'call_function' node: mul.39, its parent list: ['conv3.for.upsample1.cv2.bn', 'sigmoid.39'], its children list: ['cat.7']
[build_fx_graph] This is the 'call_function' node: cat.7, its parent list: ['mul.38', 'mul.39'], its children list: ['conv3.for.upsample1.cv3.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv3.conv', the manually converted node name is 'conv3.for.upsample1.cv3.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv3.conv, its parent list: ['cat.7'], its children list: ['conv3.for.upsample1.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample1.cv3.bn', the manually converted node name is 'conv3.for.upsample1.cv3.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample1.cv3.bn, its parent list: ['conv3.for.upsample1.cv3.conv'], its children list: ['sigmoid.40', 'mul.40'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.40, its parent list: ['conv3.for.upsample1.cv3.bn'], its children list: ['mul.40']
[build_fx_graph] This is the 'call_function' node: mul.40, its parent list: ['conv3.for.upsample1.cv3.bn', 'sigmoid.40'], its children list: ['conv.for.feat2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv_for_feat2.conv', the manually converted node name is 'conv.for.feat2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv.for.feat2.conv, its parent list: ['mul.40'], its children list: ['conv.for.feat2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv_for_feat2.bn', the manually converted node name is 'conv.for.feat2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv.for.feat2.bn, its parent list: ['conv.for.feat2.conv'], its children list: ['sigmoid.41', 'mul.41'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.41, its parent list: ['conv.for.feat2.bn'], its children list: ['mul.41']
[build_fx_graph] This is the 'call_function' node: mul.41, its parent list: ['conv.for.feat2.bn', 'sigmoid.41'], its children list: ['upsample.1', 'cat.10']
[build_fx_graph][warning] The target name from Torch.FX is 'upsample', the manually converted node name is 'upsample.1', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: upsample.1, its parent list: ['mul.41'], its children list: ['cat.8'], its type: torch.nn.modules.upsampling.Upsample
[build_fx_graph] This is the 'call_function' node: cat.8, its parent list: ['upsample.1', 'mul.16'], its children list: ['conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv1.conv', the manually converted node name is 'conv3.for.upsample2.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv1.conv, its parent list: ['cat.8'], its children list: ['conv3.for.upsample2.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv1.bn', the manually converted node name is 'conv3.for.upsample2.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv1.bn, its parent list: ['conv3.for.upsample2.cv1.conv'], its children list: ['sigmoid.42', 'mul.42'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.42, its parent list: ['conv3.for.upsample2.cv1.bn'], its children list: ['mul.42']
[build_fx_graph] This is the 'call_function' node: mul.42, its parent list: ['conv3.for.upsample2.cv1.bn', 'sigmoid.42'], its children list: ['conv3.for.upsample2.m.0.cv1.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.m.0.cv1.conv', the manually converted node name is 'conv3.for.upsample2.m.0.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.m.0.cv1.conv, its parent list: ['mul.42'], its children list: ['conv3.for.upsample2.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.m.0.cv1.bn', the manually converted node name is 'conv3.for.upsample2.m.0.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.m.0.cv1.bn, its parent list: ['conv3.for.upsample2.m.0.cv1.conv'], its children list: ['sigmoid.43', 'mul.43'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.43, its parent list: ['conv3.for.upsample2.m.0.cv1.bn'], its children list: ['mul.43']
[build_fx_graph] This is the 'call_function' node: mul.43, its parent list: ['conv3.for.upsample2.m.0.cv1.bn', 'sigmoid.43'], its children list: ['conv3.for.upsample2.m.0.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.m.0.cv2.conv', the manually converted node name is 'conv3.for.upsample2.m.0.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.m.0.cv2.conv, its parent list: ['mul.43'], its children list: ['conv3.for.upsample2.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.m.0.cv2.bn', the manually converted node name is 'conv3.for.upsample2.m.0.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.m.0.cv2.bn, its parent list: ['conv3.for.upsample2.m.0.cv2.conv'], its children list: ['sigmoid.44', 'mul.44'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.44, its parent list: ['conv3.for.upsample2.m.0.cv2.bn'], its children list: ['mul.44']
[build_fx_graph] This is the 'call_function' node: mul.44, its parent list: ['conv3.for.upsample2.m.0.cv2.bn', 'sigmoid.44'], its children list: ['cat.9']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv2.conv', the manually converted node name is 'conv3.for.upsample2.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv2.conv, its parent list: ['cat.8'], its children list: ['conv3.for.upsample2.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv2.bn', the manually converted node name is 'conv3.for.upsample2.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv2.bn, its parent list: ['conv3.for.upsample2.cv2.conv'], its children list: ['sigmoid.45', 'mul.45'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.45, its parent list: ['conv3.for.upsample2.cv2.bn'], its children list: ['mul.45']
[build_fx_graph] This is the 'call_function' node: mul.45, its parent list: ['conv3.for.upsample2.cv2.bn', 'sigmoid.45'], its children list: ['cat.9']
[build_fx_graph] This is the 'call_function' node: cat.9, its parent list: ['mul.44', 'mul.45'], its children list: ['conv3.for.upsample2.cv3.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv3.conv', the manually converted node name is 'conv3.for.upsample2.cv3.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv3.conv, its parent list: ['cat.9'], its children list: ['conv3.for.upsample2.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_upsample2.cv3.bn', the manually converted node name is 'conv3.for.upsample2.cv3.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.upsample2.cv3.bn, its parent list: ['conv3.for.upsample2.cv3.conv'], its children list: ['sigmoid.46', 'mul.46'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.46, its parent list: ['conv3.for.upsample2.cv3.bn'], its children list: ['mul.46']
[build_fx_graph] This is the 'call_function' node: mul.46, its parent list: ['conv3.for.upsample2.cv3.bn', 'sigmoid.46'], its children list: ['down.sample1.conv', 'yolo.head.p3']
[build_fx_graph][warning] The target name from Torch.FX is 'down_sample1.conv', the manually converted node name is 'down.sample1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: down.sample1.conv, its parent list: ['mul.46'], its children list: ['down.sample1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'down_sample1.bn', the manually converted node name is 'down.sample1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: down.sample1.bn, its parent list: ['down.sample1.conv'], its children list: ['sigmoid.47', 'mul.47'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.47, its parent list: ['down.sample1.bn'], its children list: ['mul.47']
[build_fx_graph] This is the 'call_function' node: mul.47, its parent list: ['down.sample1.bn', 'sigmoid.47'], its children list: ['cat.10']
[build_fx_graph] This is the 'call_function' node: cat.10, its parent list: ['mul.47', 'mul.41'], its children list: ['conv3.for.downsample1.cv1.conv', 'conv3.for.downsample1.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv1.conv', the manually converted node name is 'conv3.for.downsample1.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv1.conv, its parent list: ['cat.10'], its children list: ['conv3.for.downsample1.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv1.bn', the manually converted node name is 'conv3.for.downsample1.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv1.bn, its parent list: ['conv3.for.downsample1.cv1.conv'], its children list: ['sigmoid.48', 'mul.48'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.48, its parent list: ['conv3.for.downsample1.cv1.bn'], its children list: ['mul.48']
[build_fx_graph] This is the 'call_function' node: mul.48, its parent list: ['conv3.for.downsample1.cv1.bn', 'sigmoid.48'], its children list: ['conv3.for.downsample1.m.0.cv1.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.m.0.cv1.conv', the manually converted node name is 'conv3.for.downsample1.m.0.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.m.0.cv1.conv, its parent list: ['mul.48'], its children list: ['conv3.for.downsample1.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.m.0.cv1.bn', the manually converted node name is 'conv3.for.downsample1.m.0.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.m.0.cv1.bn, its parent list: ['conv3.for.downsample1.m.0.cv1.conv'], its children list: ['sigmoid.49', 'mul.49'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.49, its parent list: ['conv3.for.downsample1.m.0.cv1.bn'], its children list: ['mul.49']
[build_fx_graph] This is the 'call_function' node: mul.49, its parent list: ['conv3.for.downsample1.m.0.cv1.bn', 'sigmoid.49'], its children list: ['conv3.for.downsample1.m.0.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.m.0.cv2.conv', the manually converted node name is 'conv3.for.downsample1.m.0.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.m.0.cv2.conv, its parent list: ['mul.49'], its children list: ['conv3.for.downsample1.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.m.0.cv2.bn', the manually converted node name is 'conv3.for.downsample1.m.0.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.m.0.cv2.bn, its parent list: ['conv3.for.downsample1.m.0.cv2.conv'], its children list: ['sigmoid.50', 'mul.50'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.50, its parent list: ['conv3.for.downsample1.m.0.cv2.bn'], its children list: ['mul.50']
[build_fx_graph] This is the 'call_function' node: mul.50, its parent list: ['conv3.for.downsample1.m.0.cv2.bn', 'sigmoid.50'], its children list: ['cat.11']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv2.conv', the manually converted node name is 'conv3.for.downsample1.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv2.conv, its parent list: ['cat.10'], its children list: ['conv3.for.downsample1.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv2.bn', the manually converted node name is 'conv3.for.downsample1.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv2.bn, its parent list: ['conv3.for.downsample1.cv2.conv'], its children list: ['sigmoid.51', 'mul.51'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.51, its parent list: ['conv3.for.downsample1.cv2.bn'], its children list: ['mul.51']
[build_fx_graph] This is the 'call_function' node: mul.51, its parent list: ['conv3.for.downsample1.cv2.bn', 'sigmoid.51'], its children list: ['cat.11']
[build_fx_graph] This is the 'call_function' node: cat.11, its parent list: ['mul.50', 'mul.51'], its children list: ['conv3.for.downsample1.cv3.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv3.conv', the manually converted node name is 'conv3.for.downsample1.cv3.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv3.conv, its parent list: ['cat.11'], its children list: ['conv3.for.downsample1.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample1.cv3.bn', the manually converted node name is 'conv3.for.downsample1.cv3.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample1.cv3.bn, its parent list: ['conv3.for.downsample1.cv3.conv'], its children list: ['sigmoid.52', 'mul.52'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.52, its parent list: ['conv3.for.downsample1.cv3.bn'], its children list: ['mul.52']
[build_fx_graph] This is the 'call_function' node: mul.52, its parent list: ['conv3.for.downsample1.cv3.bn', 'sigmoid.52'], its children list: ['down.sample2.conv', 'yolo.head.p4']
[build_fx_graph][warning] The target name from Torch.FX is 'down_sample2.conv', the manually converted node name is 'down.sample2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: down.sample2.conv, its parent list: ['mul.52'], its children list: ['down.sample2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'down_sample2.bn', the manually converted node name is 'down.sample2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: down.sample2.bn, its parent list: ['down.sample2.conv'], its children list: ['sigmoid.53', 'mul.53'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.53, its parent list: ['down.sample2.bn'], its children list: ['mul.53']
[build_fx_graph] This is the 'call_function' node: mul.53, its parent list: ['down.sample2.bn', 'sigmoid.53'], its children list: ['cat.12']
[build_fx_graph] This is the 'call_function' node: cat.12, its parent list: ['mul.53', 'mul.35'], its children list: ['conv3.for.downsample2.cv1.conv', 'conv3.for.downsample2.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv1.conv', the manually converted node name is 'conv3.for.downsample2.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv1.conv, its parent list: ['cat.12'], its children list: ['conv3.for.downsample2.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv1.bn', the manually converted node name is 'conv3.for.downsample2.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv1.bn, its parent list: ['conv3.for.downsample2.cv1.conv'], its children list: ['sigmoid.54', 'mul.54'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.54, its parent list: ['conv3.for.downsample2.cv1.bn'], its children list: ['mul.54']
[build_fx_graph] This is the 'call_function' node: mul.54, its parent list: ['conv3.for.downsample2.cv1.bn', 'sigmoid.54'], its children list: ['conv3.for.downsample2.m.0.cv1.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.m.0.cv1.conv', the manually converted node name is 'conv3.for.downsample2.m.0.cv1.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.m.0.cv1.conv, its parent list: ['mul.54'], its children list: ['conv3.for.downsample2.m.0.cv1.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.m.0.cv1.bn', the manually converted node name is 'conv3.for.downsample2.m.0.cv1.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.m.0.cv1.bn, its parent list: ['conv3.for.downsample2.m.0.cv1.conv'], its children list: ['sigmoid.55', 'mul.55'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.55, its parent list: ['conv3.for.downsample2.m.0.cv1.bn'], its children list: ['mul.55']
[build_fx_graph] This is the 'call_function' node: mul.55, its parent list: ['conv3.for.downsample2.m.0.cv1.bn', 'sigmoid.55'], its children list: ['conv3.for.downsample2.m.0.cv2.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.m.0.cv2.conv', the manually converted node name is 'conv3.for.downsample2.m.0.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.m.0.cv2.conv, its parent list: ['mul.55'], its children list: ['conv3.for.downsample2.m.0.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.m.0.cv2.bn', the manually converted node name is 'conv3.for.downsample2.m.0.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.m.0.cv2.bn, its parent list: ['conv3.for.downsample2.m.0.cv2.conv'], its children list: ['sigmoid.56', 'mul.56'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.56, its parent list: ['conv3.for.downsample2.m.0.cv2.bn'], its children list: ['mul.56']
[build_fx_graph] This is the 'call_function' node: mul.56, its parent list: ['conv3.for.downsample2.m.0.cv2.bn', 'sigmoid.56'], its children list: ['cat.13']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv2.conv', the manually converted node name is 'conv3.for.downsample2.cv2.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv2.conv, its parent list: ['cat.12'], its children list: ['conv3.for.downsample2.cv2.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv2.bn', the manually converted node name is 'conv3.for.downsample2.cv2.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv2.bn, its parent list: ['conv3.for.downsample2.cv2.conv'], its children list: ['sigmoid.57', 'mul.57'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.57, its parent list: ['conv3.for.downsample2.cv2.bn'], its children list: ['mul.57']
[build_fx_graph] This is the 'call_function' node: mul.57, its parent list: ['conv3.for.downsample2.cv2.bn', 'sigmoid.57'], its children list: ['cat.13']
[build_fx_graph] This is the 'call_function' node: cat.13, its parent list: ['mul.56', 'mul.57'], its children list: ['conv3.for.downsample2.cv3.conv']
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv3.conv', the manually converted node name is 'conv3.for.downsample2.cv3.conv', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv3.conv, its parent list: ['cat.13'], its children list: ['conv3.for.downsample2.cv3.bn'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'conv3_for_downsample2.cv3.bn', the manually converted node name is 'conv3.for.downsample2.cv3.bn', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: conv3.for.downsample2.cv3.bn, its parent list: ['conv3.for.downsample2.cv3.conv'], its children list: ['sigmoid.58', 'mul.58'], its type: torch.nn.modules.batchnorm.BatchNorm2d
[build_fx_graph] This is the 'call_function' node: sigmoid.58, its parent list: ['conv3.for.downsample2.cv3.bn'], its children list: ['mul.58']
[build_fx_graph] This is the 'call_function' node: mul.58, its parent list: ['conv3.for.downsample2.cv3.bn', 'sigmoid.58'], its children list: ['yolo.head.p5']
[build_fx_graph][warning] The target name from Torch.FX is 'yolo_head_P3', the manually converted node name is 'yolo.head.p3', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: yolo.head.p3, its parent list: ['mul.46'], its children list: ['output'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'yolo_head_P4', the manually converted node name is 'yolo.head.p4', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: yolo.head.p4, its parent list: ['mul.52'], its children list: ['output'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph][warning] The target name from Torch.FX is 'yolo_head_P5', the manually converted node name is 'yolo.head.p5', not the same one, choose the converted node name
[build_fx_graph] This is the 'call_module' node: yolo.head.p5, its parent list: ['mul.58'], its children list: ['output'], its type: torch.nn.modules.conv.Conv2d
[build_fx_graph] This is the 'output' node: output

[find_real_parents] Find the real parents for each node according to the whole network graph built with Torch.FX
[find_real_parents] node_name: 'getitem', parents num: 1
[find_real_parents] node_name: 'getitem', has no real parent because this is the first node.
[find_real_parents] node_name: 'getitem.1', parents num: 1
[find_real_parents] node_name: 'getitem.1', has no real parent because this is the first node.
[find_real_parents] node_name: 'getitem.2', parents num: 1
[find_real_parents] node_name: 'getitem.2', has no real parent because this is the first node.
[find_real_parents] node_name: 'getitem.3', parents num: 1
[find_real_parents] node_name: 'getitem.3', has no real parent because this is the first node.
[find_real_parents] node_name: 'cat', parents num: 4
[find_real_parents] node_name: 'cat', has one/several real parent(s): '[]', its real parent module type: '[]'.
[find_real_parents] node_name: 'cat', has one/several real parent(s): '[]', its real parent module type: '[]'.
[find_real_parents] node_name: 'cat', has one/several real parent(s): '[]', its real parent module type: '[]'.
[find_real_parents] node_name: 'cat', has one/several real parent(s): '[]', its real parent module type: '[]'.
[find_real_parents] node_name: 'backbone.stem.conv.conv', parents num: 1
[find_real_parents] node_name: 'backbone.stem.conv.conv', has one/several real parent(s): '[]', its real parent module type: '[]'.
[find_real_parents] node_name: 'backbone.stem.conv.bn', parents num: 1
[find_real_parents] node_name: 'backbone.stem.conv.bn', has one real parent: 'backbone.stem.conv.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid', parents num: 1
[find_real_parents] node_name: 'sigmoid', has one/several real parent(s): '['backbone.stem.conv.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul', parents num: 2
[find_real_parents] node_name: 'mul', has one/several real parent(s): '['backbone.stem.conv.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul', has one/several real parent(s): '['backbone.stem.conv.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark2.0.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.0.conv', has one/several real parent(s): '['backbone.stem.conv.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.0.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.0.bn', has one real parent: 'backbone.dark2.0.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.1', parents num: 1
[find_real_parents] node_name: 'sigmoid.1', has one/several real parent(s): '['backbone.dark2.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.1', parents num: 2
[find_real_parents] node_name: 'mul.1', has one/several real parent(s): '['backbone.dark2.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.1', has one/several real parent(s): '['backbone.dark2.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.1', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark2.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv1.conv', has one/several real parent(s): '['backbone.dark2.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv1.bn', has one real parent: 'backbone.dark2.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.2', parents num: 1
[find_real_parents] node_name: 'sigmoid.2', has one/several real parent(s): '['backbone.dark2.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.2', parents num: 2
[find_real_parents] node_name: 'mul.2', has one/several real parent(s): '['backbone.dark2.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.2', has one/several real parent(s): '['backbone.dark2.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.2', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv1.conv', has one/several real parent(s): '['backbone.dark2.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv1.bn', has one real parent: 'backbone.dark2.1.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.3', parents num: 1
[find_real_parents] node_name: 'sigmoid.3', has one/several real parent(s): '['backbone.dark2.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.3', parents num: 2
[find_real_parents] node_name: 'mul.3', has one/several real parent(s): '['backbone.dark2.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.3', has one/several real parent(s): '['backbone.dark2.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.3', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv2.conv', has one/several real parent(s): '['backbone.dark2.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.m.0.cv2.bn', has one real parent: 'backbone.dark2.1.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.4', parents num: 1
[find_real_parents] node_name: 'sigmoid.4', has one/several real parent(s): '['backbone.dark2.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.4', parents num: 2
[find_real_parents] node_name: 'mul.4', has one/several real parent(s): '['backbone.dark2.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.4', has one/several real parent(s): '['backbone.dark2.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.4', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add', parents num: 2
[find_real_parents] node_name: 'add', has one/several real parent(s): '['backbone.dark2.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add', has one/several real parent(s): '['backbone.dark2.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv2.conv', has one/several real parent(s): '['backbone.dark2.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv2.bn', has one real parent: 'backbone.dark2.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.5', parents num: 1
[find_real_parents] node_name: 'sigmoid.5', has one/several real parent(s): '['backbone.dark2.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.5', parents num: 2
[find_real_parents] node_name: 'mul.5', has one/several real parent(s): '['backbone.dark2.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.5', has one/several real parent(s): '['backbone.dark2.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.5', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.1', parents num: 2
[find_real_parents] node_name: 'cat.1', has one/several real parent(s): '['backbone.dark2.1.cv1.conv', 'backbone.dark2.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.1', has one/several real parent(s): '['backbone.dark2.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.cv3.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv3.conv', has one/several real parent(s): '['backbone.dark2.1.cv1.conv', 'backbone.dark2.1.m.0.cv2.conv', 'backbone.dark2.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark2.1.cv3.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark2.1.cv3.bn', has one real parent: 'backbone.dark2.1.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.6', parents num: 1
[find_real_parents] node_name: 'sigmoid.6', has one/several real parent(s): '['backbone.dark2.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.6', parents num: 2
[find_real_parents] node_name: 'mul.6', has one/several real parent(s): '['backbone.dark2.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.6', has one/several real parent(s): '['backbone.dark2.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.6', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.0.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.0.conv', has one/several real parent(s): '['backbone.dark2.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.0.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.0.bn', has one real parent: 'backbone.dark3.0.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.7', parents num: 1
[find_real_parents] node_name: 'sigmoid.7', has one/several real parent(s): '['backbone.dark3.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.7', parents num: 2
[find_real_parents] node_name: 'mul.7', has one/several real parent(s): '['backbone.dark3.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.7', has one/several real parent(s): '['backbone.dark3.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.7', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv1.conv', has one/several real parent(s): '['backbone.dark3.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv1.bn', has one real parent: 'backbone.dark3.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.8', parents num: 1
[find_real_parents] node_name: 'sigmoid.8', has one/several real parent(s): '['backbone.dark3.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.8', parents num: 2
[find_real_parents] node_name: 'mul.8', has one/several real parent(s): '['backbone.dark3.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.8', has one/several real parent(s): '['backbone.dark3.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.8', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv1.conv', has one/several real parent(s): '['backbone.dark3.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv1.bn', has one real parent: 'backbone.dark3.1.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.9', parents num: 1
[find_real_parents] node_name: 'sigmoid.9', has one/several real parent(s): '['backbone.dark3.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.9', parents num: 2
[find_real_parents] node_name: 'mul.9', has one/several real parent(s): '['backbone.dark3.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.9', has one/several real parent(s): '['backbone.dark3.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.9', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv2.conv', has one/several real parent(s): '['backbone.dark3.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.0.cv2.bn', has one real parent: 'backbone.dark3.1.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.10', parents num: 1
[find_real_parents] node_name: 'sigmoid.10', has one/several real parent(s): '['backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.10', parents num: 2
[find_real_parents] node_name: 'mul.10', has one/several real parent(s): '['backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.10', has one/several real parent(s): '['backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.10', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.1', parents num: 2
[find_real_parents] node_name: 'add.1', has one/several real parent(s): '['backbone.dark3.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.1', has one/several real parent(s): '['backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv1.bn', has one real parent: 'backbone.dark3.1.m.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.11', parents num: 1
[find_real_parents] node_name: 'sigmoid.11', has one/several real parent(s): '['backbone.dark3.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.11', parents num: 2
[find_real_parents] node_name: 'mul.11', has one/several real parent(s): '['backbone.dark3.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.11', has one/several real parent(s): '['backbone.dark3.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.11', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv2.conv', has one/several real parent(s): '['backbone.dark3.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.1.cv2.bn', has one real parent: 'backbone.dark3.1.m.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.12', parents num: 1
[find_real_parents] node_name: 'sigmoid.12', has one/several real parent(s): '['backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.12', parents num: 2
[find_real_parents] node_name: 'mul.12', has one/several real parent(s): '['backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.12', has one/several real parent(s): '['backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.12', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.2', parents num: 2
[find_real_parents] node_name: 'add.2', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.2', has one/several real parent(s): '['backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv', 'backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv1.bn', has one real parent: 'backbone.dark3.1.m.2.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.13', parents num: 1
[find_real_parents] node_name: 'sigmoid.13', has one/several real parent(s): '['backbone.dark3.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.13', parents num: 2
[find_real_parents] node_name: 'mul.13', has one/several real parent(s): '['backbone.dark3.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.13', has one/several real parent(s): '['backbone.dark3.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.13', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv2.conv', has one/several real parent(s): '['backbone.dark3.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.m.2.cv2.bn', has one real parent: 'backbone.dark3.1.m.2.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.14', parents num: 1
[find_real_parents] node_name: 'sigmoid.14', has one/several real parent(s): '['backbone.dark3.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.14', parents num: 2
[find_real_parents] node_name: 'mul.14', has one/several real parent(s): '['backbone.dark3.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.14', has one/several real parent(s): '['backbone.dark3.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.14', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.3', parents num: 2
[find_real_parents] node_name: 'add.3', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv', 'backbone.dark3.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.3', has one/several real parent(s): '['backbone.dark3.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv2.conv', has one/several real parent(s): '['backbone.dark3.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv2.bn', has one real parent: 'backbone.dark3.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.15', parents num: 1
[find_real_parents] node_name: 'sigmoid.15', has one/several real parent(s): '['backbone.dark3.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.15', parents num: 2
[find_real_parents] node_name: 'mul.15', has one/several real parent(s): '['backbone.dark3.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.15', has one/several real parent(s): '['backbone.dark3.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.15', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.2', parents num: 2
[find_real_parents] node_name: 'cat.2', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv', 'backbone.dark3.1.m.1.cv2.conv', 'backbone.dark3.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.2', has one/several real parent(s): '['backbone.dark3.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.cv3.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv3.conv', has one/several real parent(s): '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.m.0.cv2.conv', 'backbone.dark3.1.m.1.cv2.conv', 'backbone.dark3.1.m.2.cv2.conv', 'backbone.dark3.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark3.1.cv3.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark3.1.cv3.bn', has one real parent: 'backbone.dark3.1.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.16', parents num: 1
[find_real_parents] node_name: 'sigmoid.16', has one/several real parent(s): '['backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.16', parents num: 2
[find_real_parents] node_name: 'mul.16', has one/several real parent(s): '['backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.16', has one/several real parent(s): '['backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.16', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.0.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.0.conv', has one/several real parent(s): '['backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.0.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.0.bn', has one real parent: 'backbone.dark4.0.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.17', parents num: 1
[find_real_parents] node_name: 'sigmoid.17', has one/several real parent(s): '['backbone.dark4.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.17', parents num: 2
[find_real_parents] node_name: 'mul.17', has one/several real parent(s): '['backbone.dark4.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.17', has one/several real parent(s): '['backbone.dark4.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.17', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv1.conv', has one/several real parent(s): '['backbone.dark4.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv1.bn', has one real parent: 'backbone.dark4.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.18', parents num: 1
[find_real_parents] node_name: 'sigmoid.18', has one/several real parent(s): '['backbone.dark4.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.18', parents num: 2
[find_real_parents] node_name: 'mul.18', has one/several real parent(s): '['backbone.dark4.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.18', has one/several real parent(s): '['backbone.dark4.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.18', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv1.conv', has one/several real parent(s): '['backbone.dark4.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv1.bn', has one real parent: 'backbone.dark4.1.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.19', parents num: 1
[find_real_parents] node_name: 'sigmoid.19', has one/several real parent(s): '['backbone.dark4.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.19', parents num: 2
[find_real_parents] node_name: 'mul.19', has one/several real parent(s): '['backbone.dark4.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.19', has one/several real parent(s): '['backbone.dark4.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.19', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv2.conv', has one/several real parent(s): '['backbone.dark4.1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.0.cv2.bn', has one real parent: 'backbone.dark4.1.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.20', parents num: 1
[find_real_parents] node_name: 'sigmoid.20', has one/several real parent(s): '['backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.20', parents num: 2
[find_real_parents] node_name: 'mul.20', has one/several real parent(s): '['backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.20', has one/several real parent(s): '['backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.20', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.4', parents num: 2
[find_real_parents] node_name: 'add.4', has one/several real parent(s): '['backbone.dark4.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.4', has one/several real parent(s): '['backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv1.bn', has one real parent: 'backbone.dark4.1.m.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.21', parents num: 1
[find_real_parents] node_name: 'sigmoid.21', has one/several real parent(s): '['backbone.dark4.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.21', parents num: 2
[find_real_parents] node_name: 'mul.21', has one/several real parent(s): '['backbone.dark4.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.21', has one/several real parent(s): '['backbone.dark4.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.21', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv2.conv', has one/several real parent(s): '['backbone.dark4.1.m.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.1.cv2.bn', has one real parent: 'backbone.dark4.1.m.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.22', parents num: 1
[find_real_parents] node_name: 'sigmoid.22', has one/several real parent(s): '['backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.22', parents num: 2
[find_real_parents] node_name: 'mul.22', has one/several real parent(s): '['backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.22', has one/several real parent(s): '['backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.22', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.5', parents num: 2
[find_real_parents] node_name: 'add.5', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.5', has one/several real parent(s): '['backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv', 'backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv1.bn', has one real parent: 'backbone.dark4.1.m.2.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.23', parents num: 1
[find_real_parents] node_name: 'sigmoid.23', has one/several real parent(s): '['backbone.dark4.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.23', parents num: 2
[find_real_parents] node_name: 'mul.23', has one/several real parent(s): '['backbone.dark4.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.23', has one/several real parent(s): '['backbone.dark4.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.23', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv2.conv', has one/several real parent(s): '['backbone.dark4.1.m.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.m.2.cv2.bn', has one real parent: 'backbone.dark4.1.m.2.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.24', parents num: 1
[find_real_parents] node_name: 'sigmoid.24', has one/several real parent(s): '['backbone.dark4.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.24', parents num: 2
[find_real_parents] node_name: 'mul.24', has one/several real parent(s): '['backbone.dark4.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.24', has one/several real parent(s): '['backbone.dark4.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.24', remove 1 duplicated real parents.
[find_real_parents] node_name: 'add.6', parents num: 2
[find_real_parents] node_name: 'add.6', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv', 'backbone.dark4.1.m.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'add.6', has one/several real parent(s): '['backbone.dark4.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv2.conv', has one/several real parent(s): '['backbone.dark4.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv2.bn', has one real parent: 'backbone.dark4.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.25', parents num: 1
[find_real_parents] node_name: 'sigmoid.25', has one/several real parent(s): '['backbone.dark4.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.25', parents num: 2
[find_real_parents] node_name: 'mul.25', has one/several real parent(s): '['backbone.dark4.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.25', has one/several real parent(s): '['backbone.dark4.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.25', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.3', parents num: 2
[find_real_parents] node_name: 'cat.3', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv', 'backbone.dark4.1.m.1.cv2.conv', 'backbone.dark4.1.m.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.3', has one/several real parent(s): '['backbone.dark4.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.cv3.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv3.conv', has one/several real parent(s): '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.m.0.cv2.conv', 'backbone.dark4.1.m.1.cv2.conv', 'backbone.dark4.1.m.2.cv2.conv', 'backbone.dark4.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark4.1.cv3.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark4.1.cv3.bn', has one real parent: 'backbone.dark4.1.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.26', parents num: 1
[find_real_parents] node_name: 'sigmoid.26', has one/several real parent(s): '['backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.26', parents num: 2
[find_real_parents] node_name: 'mul.26', has one/several real parent(s): '['backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.26', has one/several real parent(s): '['backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.26', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.0.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.0.conv', has one/several real parent(s): '['backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.0.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.0.bn', has one real parent: 'backbone.dark5.0.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.27', parents num: 1
[find_real_parents] node_name: 'sigmoid.27', has one/several real parent(s): '['backbone.dark5.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.27', parents num: 2
[find_real_parents] node_name: 'mul.27', has one/several real parent(s): '['backbone.dark5.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.27', has one/several real parent(s): '['backbone.dark5.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.27', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.cv1.conv', has one/several real parent(s): '['backbone.dark5.0.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.cv1.bn', has one real parent: 'backbone.dark5.1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.28', parents num: 1
[find_real_parents] node_name: 'sigmoid.28', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.28', parents num: 2
[find_real_parents] node_name: 'mul.28', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.28', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.28', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.1.m.0', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.m.0', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.1.m.1', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.m.1', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.1.m.2', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.m.2', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.4', parents num: 4
[find_real_parents] node_name: 'cat.4', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.4', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.4', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.4', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.4', remove 3 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.cv2.conv', has one/several real parent(s): '['backbone.dark5.1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.1.cv2.bn', has one real parent: 'backbone.dark5.1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.29', parents num: 1
[find_real_parents] node_name: 'sigmoid.29', has one/several real parent(s): '['backbone.dark5.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.29', parents num: 2
[find_real_parents] node_name: 'mul.29', has one/several real parent(s): '['backbone.dark5.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.29', has one/several real parent(s): '['backbone.dark5.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.29', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.2.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv1.conv', has one/several real parent(s): '['backbone.dark5.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv1.bn', has one real parent: 'backbone.dark5.2.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.30', parents num: 1
[find_real_parents] node_name: 'sigmoid.30', has one/several real parent(s): '['backbone.dark5.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.30', parents num: 2
[find_real_parents] node_name: 'mul.30', has one/several real parent(s): '['backbone.dark5.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.30', has one/several real parent(s): '['backbone.dark5.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.30', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv1.conv', has one/several real parent(s): '['backbone.dark5.2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv1.bn', has one real parent: 'backbone.dark5.2.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.31', parents num: 1
[find_real_parents] node_name: 'sigmoid.31', has one/several real parent(s): '['backbone.dark5.2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.31', parents num: 2
[find_real_parents] node_name: 'mul.31', has one/several real parent(s): '['backbone.dark5.2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.31', has one/several real parent(s): '['backbone.dark5.2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.31', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv2.conv', has one/several real parent(s): '['backbone.dark5.2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.m.0.cv2.bn', has one real parent: 'backbone.dark5.2.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.32', parents num: 1
[find_real_parents] node_name: 'sigmoid.32', has one/several real parent(s): '['backbone.dark5.2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.32', parents num: 2
[find_real_parents] node_name: 'mul.32', has one/several real parent(s): '['backbone.dark5.2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.32', has one/several real parent(s): '['backbone.dark5.2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.32', remove 1 duplicated real parents.
[find_real_parents] node_name: 'backbone.dark5.2.cv2.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv2.conv', has one/several real parent(s): '['backbone.dark5.1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.cv2.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv2.bn', has one real parent: 'backbone.dark5.2.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.33', parents num: 1
[find_real_parents] node_name: 'sigmoid.33', has one/several real parent(s): '['backbone.dark5.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.33', parents num: 2
[find_real_parents] node_name: 'mul.33', has one/several real parent(s): '['backbone.dark5.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.33', has one/several real parent(s): '['backbone.dark5.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.33', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.5', parents num: 2
[find_real_parents] node_name: 'cat.5', has one/several real parent(s): '['backbone.dark5.2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.5', has one/several real parent(s): '['backbone.dark5.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.cv3.conv', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv3.conv', has one/several real parent(s): '['backbone.dark5.2.m.0.cv2.conv', 'backbone.dark5.2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'backbone.dark5.2.cv3.bn', parents num: 1
[find_real_parents] node_name: 'backbone.dark5.2.cv3.bn', has one real parent: 'backbone.dark5.2.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.34', parents num: 1
[find_real_parents] node_name: 'sigmoid.34', has one/several real parent(s): '['backbone.dark5.2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.34', parents num: 2
[find_real_parents] node_name: 'mul.34', has one/several real parent(s): '['backbone.dark5.2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.34', has one/several real parent(s): '['backbone.dark5.2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.34', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv.for.feat3.conv', parents num: 1
[find_real_parents] node_name: 'conv.for.feat3.conv', has one/several real parent(s): '['backbone.dark5.2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv.for.feat3.bn', parents num: 1
[find_real_parents] node_name: 'conv.for.feat3.bn', has one real parent: 'conv.for.feat3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.35', parents num: 1
[find_real_parents] node_name: 'sigmoid.35', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.35', parents num: 2
[find_real_parents] node_name: 'mul.35', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.35', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.35', remove 1 duplicated real parents.
[find_real_parents] node_name: 'upsample', parents num: 1
[find_real_parents] node_name: 'upsample', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.6', parents num: 2
[find_real_parents] node_name: 'cat.6', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.6', has one/several real parent(s): '['backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv1.conv', has one/several real parent(s): '['conv.for.feat3.conv', 'backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv1.bn', has one real parent: 'conv3.for.upsample1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.36', parents num: 1
[find_real_parents] node_name: 'sigmoid.36', has one/several real parent(s): '['conv3.for.upsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.36', parents num: 2
[find_real_parents] node_name: 'mul.36', has one/several real parent(s): '['conv3.for.upsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.36', has one/several real parent(s): '['conv3.for.upsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.36', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv1.conv', has one/several real parent(s): '['conv3.for.upsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv1.bn', has one real parent: 'conv3.for.upsample1.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.37', parents num: 1
[find_real_parents] node_name: 'sigmoid.37', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.37', parents num: 2
[find_real_parents] node_name: 'mul.37', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.37', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.37', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv2.conv', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.m.0.cv2.bn', has one real parent: 'conv3.for.upsample1.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.38', parents num: 1
[find_real_parents] node_name: 'sigmoid.38', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.38', parents num: 2
[find_real_parents] node_name: 'mul.38', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.38', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.38', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv2.conv', has one/several real parent(s): '['conv.for.feat3.conv', 'backbone.dark4.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv2.bn', has one real parent: 'conv3.for.upsample1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.39', parents num: 1
[find_real_parents] node_name: 'sigmoid.39', has one/several real parent(s): '['conv3.for.upsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.39', parents num: 2
[find_real_parents] node_name: 'mul.39', has one/several real parent(s): '['conv3.for.upsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.39', has one/several real parent(s): '['conv3.for.upsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.39', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.7', parents num: 2
[find_real_parents] node_name: 'cat.7', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.7', has one/several real parent(s): '['conv3.for.upsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.cv3.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv3.conv', has one/several real parent(s): '['conv3.for.upsample1.m.0.cv2.conv', 'conv3.for.upsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample1.cv3.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample1.cv3.bn', has one real parent: 'conv3.for.upsample1.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.40', parents num: 1
[find_real_parents] node_name: 'sigmoid.40', has one/several real parent(s): '['conv3.for.upsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.40', parents num: 2
[find_real_parents] node_name: 'mul.40', has one/several real parent(s): '['conv3.for.upsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.40', has one/several real parent(s): '['conv3.for.upsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.40', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv.for.feat2.conv', parents num: 1
[find_real_parents] node_name: 'conv.for.feat2.conv', has one/several real parent(s): '['conv3.for.upsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv.for.feat2.bn', parents num: 1
[find_real_parents] node_name: 'conv.for.feat2.bn', has one real parent: 'conv.for.feat2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.41', parents num: 1
[find_real_parents] node_name: 'sigmoid.41', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.41', parents num: 2
[find_real_parents] node_name: 'mul.41', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.41', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.41', remove 1 duplicated real parents.
[find_real_parents] node_name: 'upsample.1', parents num: 1
[find_real_parents] node_name: 'upsample.1', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.8', parents num: 2
[find_real_parents] node_name: 'cat.8', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.8', has one/several real parent(s): '['backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv1.conv', has one/several real parent(s): '['conv.for.feat2.conv', 'backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv1.bn', has one real parent: 'conv3.for.upsample2.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.42', parents num: 1
[find_real_parents] node_name: 'sigmoid.42', has one/several real parent(s): '['conv3.for.upsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.42', parents num: 2
[find_real_parents] node_name: 'mul.42', has one/several real parent(s): '['conv3.for.upsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.42', has one/several real parent(s): '['conv3.for.upsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.42', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv1.conv', has one/several real parent(s): '['conv3.for.upsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv1.bn', has one real parent: 'conv3.for.upsample2.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.43', parents num: 1
[find_real_parents] node_name: 'sigmoid.43', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.43', parents num: 2
[find_real_parents] node_name: 'mul.43', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.43', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.43', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv2.conv', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.m.0.cv2.bn', has one real parent: 'conv3.for.upsample2.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.44', parents num: 1
[find_real_parents] node_name: 'sigmoid.44', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.44', parents num: 2
[find_real_parents] node_name: 'mul.44', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.44', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.44', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.upsample2.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv2.conv', has one/several real parent(s): '['conv.for.feat2.conv', 'backbone.dark3.1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv2.bn', has one real parent: 'conv3.for.upsample2.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.45', parents num: 1
[find_real_parents] node_name: 'sigmoid.45', has one/several real parent(s): '['conv3.for.upsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.45', parents num: 2
[find_real_parents] node_name: 'mul.45', has one/several real parent(s): '['conv3.for.upsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.45', has one/several real parent(s): '['conv3.for.upsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.45', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.9', parents num: 2
[find_real_parents] node_name: 'cat.9', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.9', has one/several real parent(s): '['conv3.for.upsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.cv3.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv3.conv', has one/several real parent(s): '['conv3.for.upsample2.m.0.cv2.conv', 'conv3.for.upsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.upsample2.cv3.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.upsample2.cv3.bn', has one real parent: 'conv3.for.upsample2.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.46', parents num: 1
[find_real_parents] node_name: 'sigmoid.46', has one/several real parent(s): '['conv3.for.upsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.46', parents num: 2
[find_real_parents] node_name: 'mul.46', has one/several real parent(s): '['conv3.for.upsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.46', has one/several real parent(s): '['conv3.for.upsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.46', remove 1 duplicated real parents.
[find_real_parents] node_name: 'down.sample1.conv', parents num: 1
[find_real_parents] node_name: 'down.sample1.conv', has one/several real parent(s): '['conv3.for.upsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'down.sample1.bn', parents num: 1
[find_real_parents] node_name: 'down.sample1.bn', has one real parent: 'down.sample1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.47', parents num: 1
[find_real_parents] node_name: 'sigmoid.47', has one/several real parent(s): '['down.sample1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.47', parents num: 2
[find_real_parents] node_name: 'mul.47', has one/several real parent(s): '['down.sample1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.47', has one/several real parent(s): '['down.sample1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.47', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.10', parents num: 2
[find_real_parents] node_name: 'cat.10', has one/several real parent(s): '['down.sample1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.10', has one/several real parent(s): '['conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv1.conv', has one/several real parent(s): '['down.sample1.conv', 'conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv1.bn', has one real parent: 'conv3.for.downsample1.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.48', parents num: 1
[find_real_parents] node_name: 'sigmoid.48', has one/several real parent(s): '['conv3.for.downsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.48', parents num: 2
[find_real_parents] node_name: 'mul.48', has one/several real parent(s): '['conv3.for.downsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.48', has one/several real parent(s): '['conv3.for.downsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.48', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv1.conv', has one/several real parent(s): '['conv3.for.downsample1.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv1.bn', has one real parent: 'conv3.for.downsample1.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.49', parents num: 1
[find_real_parents] node_name: 'sigmoid.49', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.49', parents num: 2
[find_real_parents] node_name: 'mul.49', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.49', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.49', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv2.conv', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.m.0.cv2.bn', has one real parent: 'conv3.for.downsample1.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.50', parents num: 1
[find_real_parents] node_name: 'sigmoid.50', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.50', parents num: 2
[find_real_parents] node_name: 'mul.50', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.50', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.50', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample1.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv2.conv', has one/several real parent(s): '['down.sample1.conv', 'conv.for.feat2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv2.bn', has one real parent: 'conv3.for.downsample1.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.51', parents num: 1
[find_real_parents] node_name: 'sigmoid.51', has one/several real parent(s): '['conv3.for.downsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.51', parents num: 2
[find_real_parents] node_name: 'mul.51', has one/several real parent(s): '['conv3.for.downsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.51', has one/several real parent(s): '['conv3.for.downsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.51', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.11', parents num: 2
[find_real_parents] node_name: 'cat.11', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.11', has one/several real parent(s): '['conv3.for.downsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.cv3.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv3.conv', has one/several real parent(s): '['conv3.for.downsample1.m.0.cv2.conv', 'conv3.for.downsample1.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample1.cv3.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample1.cv3.bn', has one real parent: 'conv3.for.downsample1.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.52', parents num: 1
[find_real_parents] node_name: 'sigmoid.52', has one/several real parent(s): '['conv3.for.downsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.52', parents num: 2
[find_real_parents] node_name: 'mul.52', has one/several real parent(s): '['conv3.for.downsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.52', has one/several real parent(s): '['conv3.for.downsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.52', remove 1 duplicated real parents.
[find_real_parents] node_name: 'down.sample2.conv', parents num: 1
[find_real_parents] node_name: 'down.sample2.conv', has one/several real parent(s): '['conv3.for.downsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'down.sample2.bn', parents num: 1
[find_real_parents] node_name: 'down.sample2.bn', has one real parent: 'down.sample2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.53', parents num: 1
[find_real_parents] node_name: 'sigmoid.53', has one/several real parent(s): '['down.sample2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.53', parents num: 2
[find_real_parents] node_name: 'mul.53', has one/several real parent(s): '['down.sample2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.53', has one/several real parent(s): '['down.sample2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.53', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.12', parents num: 2
[find_real_parents] node_name: 'cat.12', has one/several real parent(s): '['down.sample2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.12', has one/several real parent(s): '['conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv1.conv', has one/several real parent(s): '['down.sample2.conv', 'conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv1.bn', has one real parent: 'conv3.for.downsample2.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.54', parents num: 1
[find_real_parents] node_name: 'sigmoid.54', has one/several real parent(s): '['conv3.for.downsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.54', parents num: 2
[find_real_parents] node_name: 'mul.54', has one/several real parent(s): '['conv3.for.downsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.54', has one/several real parent(s): '['conv3.for.downsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.54', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv1.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv1.conv', has one/several real parent(s): '['conv3.for.downsample2.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv1.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv1.bn', has one real parent: 'conv3.for.downsample2.m.0.cv1.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.55', parents num: 1
[find_real_parents] node_name: 'sigmoid.55', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.55', parents num: 2
[find_real_parents] node_name: 'mul.55', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.55', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.55', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv2.conv', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv1.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.m.0.cv2.bn', has one real parent: 'conv3.for.downsample2.m.0.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.56', parents num: 1
[find_real_parents] node_name: 'sigmoid.56', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.56', parents num: 2
[find_real_parents] node_name: 'mul.56', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.56', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.56', remove 1 duplicated real parents.
[find_real_parents] node_name: 'conv3.for.downsample2.cv2.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv2.conv', has one/several real parent(s): '['down.sample2.conv', 'conv.for.feat3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.cv2.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv2.bn', has one real parent: 'conv3.for.downsample2.cv2.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.57', parents num: 1
[find_real_parents] node_name: 'sigmoid.57', has one/several real parent(s): '['conv3.for.downsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.57', parents num: 2
[find_real_parents] node_name: 'mul.57', has one/several real parent(s): '['conv3.for.downsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.57', has one/several real parent(s): '['conv3.for.downsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.57', remove 1 duplicated real parents.
[find_real_parents] node_name: 'cat.13', parents num: 2
[find_real_parents] node_name: 'cat.13', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'cat.13', has one/several real parent(s): '['conv3.for.downsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.cv3.conv', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv3.conv', has one/several real parent(s): '['conv3.for.downsample2.m.0.cv2.conv', 'conv3.for.downsample2.cv2.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'conv3.for.downsample2.cv3.bn', parents num: 1
[find_real_parents] node_name: 'conv3.for.downsample2.cv3.bn', has one real parent: 'conv3.for.downsample2.cv3.conv', its real parent module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_parents] node_name: 'sigmoid.58', parents num: 1
[find_real_parents] node_name: 'sigmoid.58', has one/several real parent(s): '['conv3.for.downsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.58', parents num: 2
[find_real_parents] node_name: 'mul.58', has one/several real parent(s): '['conv3.for.downsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.58', has one/several real parent(s): '['conv3.for.downsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'mul.58', remove 1 duplicated real parents.
[find_real_parents] node_name: 'yolo.head.p3', parents num: 1
[find_real_parents] node_name: 'yolo.head.p3', has one/several real parent(s): '['conv3.for.upsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'yolo.head.p4', parents num: 1
[find_real_parents] node_name: 'yolo.head.p4', has one/several real parent(s): '['conv3.for.downsample1.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.
[find_real_parents] node_name: 'yolo.head.p5', parents num: 1
[find_real_parents] node_name: 'yolo.head.p5', has one/several real parent(s): '['conv3.for.downsample2.cv3.conv']', its real parent module type: '['torch.nn.modules.conv.Conv2d']'.

[find_real_children] Find the real children for each node according to the whole network graph built with Torch.FX

[find_real_children] node_name: 'yolo.head.p5', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.

[find_real_children] node_name: 'yolo.head.p4', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.

[find_real_children] node_name: 'yolo.head.p3', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.

[find_real_children] node_name: 'mul.58', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.58', has one real child: 'yolo.head.p5', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.58', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.58', its child: 'mul.58' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv3.bn', its child: 'sigmoid.58' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv3.bn', its child: 'mul.58' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample2.cv3.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample2.cv3.conv', has one real child: 'yolo.head.p5', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.13', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.13', has one real child: 'conv3.for.downsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.57', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.57', its child: 'cat.13' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.57', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.57', its child: 'mul.57' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv2.bn', its child: 'sigmoid.57' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv2.bn', its child: 'mul.57' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample2.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample2.cv2.conv', has one real child: 'conv3.for.downsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.56', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.56', its child: 'cat.13' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.56', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.56', its child: 'mul.56' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.bn', its child: 'sigmoid.56' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.bn', its child: 'mul.56' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv2.conv', has one real child: 'conv3.for.downsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.55', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.55', has one real child: 'conv3.for.downsample2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.55', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.55', its child: 'mul.55' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.bn', its child: 'sigmoid.55' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.bn', its child: 'mul.55' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample2.m.0.cv1.conv', has one real child: 'conv3.for.downsample2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.54', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.54', has one real child: 'conv3.for.downsample2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.54', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.54', its child: 'mul.54' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv1.bn', its child: 'sigmoid.54' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample2.cv1.bn', its child: 'mul.54' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample2.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample2.cv1.conv', has one real child: 'conv3.for.downsample2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.12', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.12', has one real child: 'conv3.for.downsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'cat.12', has one real child: 'conv3.for.downsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.53', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.53', its child: 'cat.12' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.53', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.53', its child: 'mul.53' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'down.sample2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'down.sample2.bn', its child: 'sigmoid.53' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'down.sample2.bn', its child: 'mul.53' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'down.sample2.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'down.sample2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'down.sample2.conv', has one real child: 'conv3.for.downsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'down.sample2.conv', has one real child: 'conv3.for.downsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.52', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.52', has one real child: 'down.sample2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.52', has one real child: 'yolo.head.p4', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.52', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.52', its child: 'mul.52' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv3.bn', its child: 'sigmoid.52' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv3.bn', its child: 'mul.52' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample1.cv3.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample1.cv3.conv', has one real child: 'down.sample2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv3.for.downsample1.cv3.conv', has one real child: 'yolo.head.p4', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.11', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.11', has one real child: 'conv3.for.downsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.51', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.51', its child: 'cat.11' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.51', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.51', its child: 'mul.51' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv2.bn', its child: 'sigmoid.51' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv2.bn', its child: 'mul.51' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample1.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample1.cv2.conv', has one real child: 'conv3.for.downsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.50', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.50', its child: 'cat.11' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.50', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.50', its child: 'mul.50' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.bn', its child: 'sigmoid.50' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.bn', its child: 'mul.50' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv2.conv', has one real child: 'conv3.for.downsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.49', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.49', has one real child: 'conv3.for.downsample1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.49', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.49', its child: 'mul.49' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.bn', its child: 'sigmoid.49' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.bn', its child: 'mul.49' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample1.m.0.cv1.conv', has one real child: 'conv3.for.downsample1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.48', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.48', has one real child: 'conv3.for.downsample1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.48', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.48', its child: 'mul.48' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.downsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv1.bn', its child: 'sigmoid.48' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.downsample1.cv1.bn', its child: 'mul.48' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.downsample1.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.downsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.downsample1.cv1.conv', has one real child: 'conv3.for.downsample1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.10', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.10', has one real child: 'conv3.for.downsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'cat.10', has one real child: 'conv3.for.downsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.47', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.47', its child: 'cat.10' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.47', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.47', its child: 'mul.47' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'down.sample1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'down.sample1.bn', its child: 'sigmoid.47' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'down.sample1.bn', its child: 'mul.47' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'down.sample1.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'down.sample1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'down.sample1.conv', has one real child: 'conv3.for.downsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'down.sample1.conv', has one real child: 'conv3.for.downsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.46', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.46', has one real child: 'down.sample1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.46', has one real child: 'yolo.head.p3', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.46', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.46', its child: 'mul.46' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv3.bn', its child: 'sigmoid.46' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv3.bn', its child: 'mul.46' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample2.cv3.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample2.cv3.conv', has one real child: 'down.sample1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv3.for.upsample2.cv3.conv', has one real child: 'yolo.head.p3', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.9', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.9', has one real child: 'conv3.for.upsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.45', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.45', its child: 'cat.9' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.45', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.45', its child: 'mul.45' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv2.bn', its child: 'sigmoid.45' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv2.bn', its child: 'mul.45' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample2.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample2.cv2.conv', has one real child: 'conv3.for.upsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.44', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.44', its child: 'cat.9' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.44', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.44', its child: 'mul.44' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.bn', its child: 'sigmoid.44' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.bn', its child: 'mul.44' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv2.conv', has one real child: 'conv3.for.upsample2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.43', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.43', has one real child: 'conv3.for.upsample2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.43', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.43', its child: 'mul.43' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.bn', its child: 'sigmoid.43' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.bn', its child: 'mul.43' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample2.m.0.cv1.conv', has one real child: 'conv3.for.upsample2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.42', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.42', has one real child: 'conv3.for.upsample2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.42', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.42', its child: 'mul.42' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv1.bn', its child: 'sigmoid.42' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample2.cv1.bn', its child: 'mul.42' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample2.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample2.cv1.conv', has one real child: 'conv3.for.upsample2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.8', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.8', has one real child: 'conv3.for.upsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'cat.8', has one real child: 'conv3.for.upsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'upsample.1', node module type: 'torch.nn.modules.upsampling.Upsample', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'upsample.1', its child: 'cat.8' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.41', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.41', its child: 'upsample.1' with module type: 'torch.nn.modules.upsampling.Upsample', needs recursive search.
[recursive_find_real_children] node_name: 'mul.41', its child: 'cat.10' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.41', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.41', its child: 'mul.41' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv.for.feat2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv.for.feat2.bn', its child: 'sigmoid.41' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv.for.feat2.bn', its child: 'mul.41' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv.for.feat2.bn', remove 4 duplicated real children.

[find_real_children] node_name: 'conv.for.feat2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv.for.feat2.conv', has one real child: 'conv3.for.upsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat2.conv', has one real child: 'conv3.for.upsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat2.conv', has one real child: 'conv3.for.downsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat2.conv', has one real child: 'conv3.for.downsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.40', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.40', has one real child: 'conv.for.feat2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.40', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.40', its child: 'mul.40' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv3.bn', its child: 'sigmoid.40' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv3.bn', its child: 'mul.40' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample1.cv3.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample1.cv3.conv', has one real child: 'conv.for.feat2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.7', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.7', has one real child: 'conv3.for.upsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.39', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.39', its child: 'cat.7' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.39', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.39', its child: 'mul.39' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv2.bn', its child: 'sigmoid.39' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv2.bn', its child: 'mul.39' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample1.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample1.cv2.conv', has one real child: 'conv3.for.upsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.38', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.38', its child: 'cat.7' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.38', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.38', its child: 'mul.38' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.bn', its child: 'sigmoid.38' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.bn', its child: 'mul.38' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv2.conv', has one real child: 'conv3.for.upsample1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.37', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.37', has one real child: 'conv3.for.upsample1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.37', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.37', its child: 'mul.37' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.bn', its child: 'sigmoid.37' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.bn', its child: 'mul.37' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample1.m.0.cv1.conv', has one real child: 'conv3.for.upsample1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.36', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.36', has one real child: 'conv3.for.upsample1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.36', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.36', its child: 'mul.36' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv3.for.upsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv1.bn', its child: 'sigmoid.36' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv3.for.upsample1.cv1.bn', its child: 'mul.36' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv3.for.upsample1.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'conv3.for.upsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv3.for.upsample1.cv1.conv', has one real child: 'conv3.for.upsample1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.6', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.6', has one real child: 'conv3.for.upsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'cat.6', has one real child: 'conv3.for.upsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'upsample', node module type: 'torch.nn.modules.upsampling.Upsample', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'upsample', its child: 'cat.6' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.35', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.35', its child: 'upsample' with module type: 'torch.nn.modules.upsampling.Upsample', needs recursive search.
[recursive_find_real_children] node_name: 'mul.35', its child: 'cat.12' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.35', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.35', its child: 'mul.35' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'conv.for.feat3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'conv.for.feat3.bn', its child: 'sigmoid.35' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'conv.for.feat3.bn', its child: 'mul.35' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'conv.for.feat3.bn', remove 4 duplicated real children.

[find_real_children] node_name: 'conv.for.feat3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'conv.for.feat3.conv', has one real child: 'conv3.for.upsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat3.conv', has one real child: 'conv3.for.upsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat3.conv', has one real child: 'conv3.for.downsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'conv.for.feat3.conv', has one real child: 'conv3.for.downsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.34', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.34', has one real child: 'conv.for.feat3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.34', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.34', its child: 'mul.34' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv3.bn', its child: 'sigmoid.34' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv3.bn', its child: 'mul.34' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.2.cv3.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.2.cv3.conv', has one real child: 'conv.for.feat3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.5', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.5', has one real child: 'backbone.dark5.2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.33', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.33', its child: 'cat.5' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.33', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.33', its child: 'mul.33' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv2.bn', its child: 'sigmoid.33' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv2.bn', its child: 'mul.33' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.2.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.2.cv2.conv', has one real child: 'backbone.dark5.2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.32', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.32', its child: 'cat.5' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.32', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.32', its child: 'mul.32' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.bn', its child: 'sigmoid.32' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.bn', its child: 'mul.32' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.2.m.0.cv2.conv', has one real child: 'backbone.dark5.2.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.31', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.31', has one real child: 'backbone.dark5.2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.31', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.31', its child: 'mul.31' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.bn', its child: 'sigmoid.31' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.bn', its child: 'mul.31' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.2.m.0.cv1.conv', has one real child: 'backbone.dark5.2.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.30', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.30', has one real child: 'backbone.dark5.2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.30', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.30', its child: 'mul.30' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv1.bn', its child: 'sigmoid.30' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.2.cv1.bn', its child: 'mul.30' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.2.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.2.cv1.conv', has one real child: 'backbone.dark5.2.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.29', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.29', has one real child: 'backbone.dark5.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.29', has one real child: 'backbone.dark5.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.29', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.29', its child: 'mul.29' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.1.cv2.bn', its child: 'sigmoid.29' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.1.cv2.bn', its child: 'mul.29' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.1.cv2.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.1.cv2.conv', has one real child: 'backbone.dark5.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark5.1.cv2.conv', has one real child: 'backbone.dark5.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.4', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.4', has one real child: 'backbone.dark5.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'backbone.dark5.1.m.2', node module type: 'torch.nn.modules.pooling.MaxPool2d', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.1.m.2', its child: 'cat.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.1.m.1', node module type: 'torch.nn.modules.pooling.MaxPool2d', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.1.m.1', its child: 'cat.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.1.m.0', node module type: 'torch.nn.modules.pooling.MaxPool2d', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.1.m.0', its child: 'cat.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.28', node module type: 'None', children num: 4, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.28', its child: 'backbone.dark5.1.m.0' with module type: 'torch.nn.modules.pooling.MaxPool2d', needs recursive search.
[recursive_find_real_children] node_name: 'mul.28', its child: 'backbone.dark5.1.m.1' with module type: 'torch.nn.modules.pooling.MaxPool2d', needs recursive search.
[recursive_find_real_children] node_name: 'mul.28', its child: 'backbone.dark5.1.m.2' with module type: 'torch.nn.modules.pooling.MaxPool2d', needs recursive search.
[recursive_find_real_children] node_name: 'mul.28', its child: 'cat.4' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'mul.28', remove 3 duplicated real children.

[find_real_children] node_name: 'sigmoid.28', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.28', its child: 'mul.28' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.1.cv1.bn', its child: 'sigmoid.28' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.1.cv1.bn', its child: 'mul.28' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.1.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.1.cv1.conv', has one real child: 'backbone.dark5.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.27', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.27', has one real child: 'backbone.dark5.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.27', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.27', its child: 'mul.27' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark5.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark5.0.bn', its child: 'sigmoid.27' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark5.0.bn', its child: 'mul.27' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark5.0.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark5.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark5.0.conv', has one real child: 'backbone.dark5.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.26', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.26', has one real child: 'backbone.dark5.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.26', its child: 'cat.6' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.26', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.26', its child: 'mul.26' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv3.bn', its child: 'sigmoid.26' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv3.bn', its child: 'mul.26' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.cv3.bn', remove 3 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.cv3.conv', has one real child: 'backbone.dark5.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.cv3.conv', has one real child: 'conv3.for.upsample1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.cv3.conv', has one real child: 'conv3.for.upsample1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.3', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.3', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.25', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.25', its child: 'cat.3' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.25', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.25', its child: 'mul.25' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv2.bn', its child: 'sigmoid.25' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv2.bn', its child: 'mul.25' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.cv2.conv', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.6', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'add.6', its child: 'cat.3' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.24', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.24', its child: 'add.6' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.24', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.24', its child: 'mul.24' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.bn', its child: 'sigmoid.24' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.bn', its child: 'mul.24' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.2.cv2.conv', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.23', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.23', has one real child: 'backbone.dark4.1.m.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.23', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.23', its child: 'mul.23' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.bn', its child: 'sigmoid.23' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.bn', its child: 'mul.23' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real child: 'backbone.dark4.1.m.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.5', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'add.5', has one real child: 'backbone.dark4.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'add.5', its child: 'add.6' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.22', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.22', its child: 'add.5' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.22', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.22', its child: 'mul.22' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.bn', its child: 'sigmoid.22' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.bn', its child: 'mul.22' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.conv', has one real child: 'backbone.dark4.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.m.1.cv2.conv', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.21', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.21', has one real child: 'backbone.dark4.1.m.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.21', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.21', its child: 'mul.21' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.bn', its child: 'sigmoid.21' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.bn', its child: 'mul.21' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real child: 'backbone.dark4.1.m.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.4', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'add.4', has one real child: 'backbone.dark4.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'add.4', its child: 'add.5' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.20', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.20', its child: 'add.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.20', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.20', its child: 'mul.20' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.bn', its child: 'sigmoid.20' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.bn', its child: 'mul.20' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.bn', remove 3 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.conv', has one real child: 'backbone.dark4.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.conv', has one real child: 'backbone.dark4.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv2.conv', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.19', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.19', has one real child: 'backbone.dark4.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.19', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.19', its child: 'mul.19' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.bn', its child: 'sigmoid.19' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.bn', its child: 'mul.19' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.m.0.cv1.conv', has one real child: 'backbone.dark4.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.18', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.18', has one real child: 'backbone.dark4.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.18', its child: 'add.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.18', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.18', its child: 'mul.18' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv1.bn', its child: 'sigmoid.18' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.1.cv1.bn', its child: 'mul.18' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.1.cv1.bn', remove 4 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.1.cv1.conv', has one real child: 'backbone.dark4.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.cv1.conv', has one real child: 'backbone.dark4.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.cv1.conv', has one real child: 'backbone.dark4.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.1.cv1.conv', has one real child: 'backbone.dark4.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.17', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.17', has one real child: 'backbone.dark4.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.17', has one real child: 'backbone.dark4.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.17', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.17', its child: 'mul.17' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark4.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark4.0.bn', its child: 'sigmoid.17' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark4.0.bn', its child: 'mul.17' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark4.0.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark4.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark4.0.conv', has one real child: 'backbone.dark4.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark4.0.conv', has one real child: 'backbone.dark4.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.16', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.16', has one real child: 'backbone.dark4.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.16', its child: 'cat.8' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.16', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.16', its child: 'mul.16' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv3.bn', its child: 'sigmoid.16' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv3.bn', its child: 'mul.16' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.cv3.bn', remove 3 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.cv3.conv', has one real child: 'backbone.dark4.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.cv3.conv', has one real child: 'conv3.for.upsample2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.cv3.conv', has one real child: 'conv3.for.upsample2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.2', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.2', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.15', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.15', its child: 'cat.2' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.15', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.15', its child: 'mul.15' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv2.bn', its child: 'sigmoid.15' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv2.bn', its child: 'mul.15' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.cv2.conv', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.3', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'add.3', its child: 'cat.2' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.14', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.14', its child: 'add.3' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.14', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.14', its child: 'mul.14' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.bn', its child: 'sigmoid.14' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.bn', its child: 'mul.14' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.2.cv2.conv', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.13', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.13', has one real child: 'backbone.dark3.1.m.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.13', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.13', its child: 'mul.13' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.bn', its child: 'sigmoid.13' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.bn', its child: 'mul.13' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real child: 'backbone.dark3.1.m.2.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.2', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'add.2', has one real child: 'backbone.dark3.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'add.2', its child: 'add.3' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.12', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.12', its child: 'add.2' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.12', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.12', its child: 'mul.12' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.bn', its child: 'sigmoid.12' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.bn', its child: 'mul.12' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.conv', has one real child: 'backbone.dark3.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.m.1.cv2.conv', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.11', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.11', has one real child: 'backbone.dark3.1.m.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.11', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.11', its child: 'mul.11' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.bn', its child: 'sigmoid.11' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.bn', its child: 'mul.11' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real child: 'backbone.dark3.1.m.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add.1', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'add.1', has one real child: 'backbone.dark3.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'add.1', its child: 'add.2' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.10', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.10', its child: 'add.1' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.10', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.10', its child: 'mul.10' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.bn', its child: 'sigmoid.10' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.bn', its child: 'mul.10' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.bn', remove 3 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.conv', has one real child: 'backbone.dark3.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.conv', has one real child: 'backbone.dark3.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv2.conv', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.9', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.9', has one real child: 'backbone.dark3.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.9', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.9', its child: 'mul.9' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.bn', its child: 'sigmoid.9' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.bn', its child: 'mul.9' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.m.0.cv1.conv', has one real child: 'backbone.dark3.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.8', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.8', has one real child: 'backbone.dark3.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.8', its child: 'add.1' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.8', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.8', its child: 'mul.8' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv1.bn', its child: 'sigmoid.8' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.1.cv1.bn', its child: 'mul.8' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.1.cv1.bn', remove 4 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.1.cv1.conv', has one real child: 'backbone.dark3.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.cv1.conv', has one real child: 'backbone.dark3.1.m.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.cv1.conv', has one real child: 'backbone.dark3.1.m.2.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.1.cv1.conv', has one real child: 'backbone.dark3.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.7', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.7', has one real child: 'backbone.dark3.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.7', has one real child: 'backbone.dark3.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.7', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.7', its child: 'mul.7' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark3.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark3.0.bn', its child: 'sigmoid.7' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark3.0.bn', its child: 'mul.7' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark3.0.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark3.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark3.0.conv', has one real child: 'backbone.dark3.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark3.0.conv', has one real child: 'backbone.dark3.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.6', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.6', has one real child: 'backbone.dark3.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.6', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.6', its child: 'mul.6' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv3.bn', its child: 'sigmoid.6' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv3.bn', its child: 'mul.6' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.1.cv3.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.1.cv3.conv', has one real child: 'backbone.dark3.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat.1', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat.1', has one real child: 'backbone.dark2.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.5', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.5', its child: 'cat.1' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.5', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.5', its child: 'mul.5' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv2.bn', its child: 'sigmoid.5' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv2.bn', its child: 'mul.5' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.1.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.1.cv2.conv', has one real child: 'backbone.dark2.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'add', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'add', its child: 'cat.1' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'mul.4', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.4', its child: 'add' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.4', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.4', its child: 'mul.4' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.bn', its child: 'sigmoid.4' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.bn', its child: 'mul.4' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.1.m.0.cv2.conv', has one real child: 'backbone.dark2.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.3', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.3', has one real child: 'backbone.dark2.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.3', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.3', its child: 'mul.3' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.bn', its child: 'sigmoid.3' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.bn', its child: 'mul.3' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.1.m.0.cv1.conv', has one real child: 'backbone.dark2.1.m.0.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.2', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.2', has one real child: 'backbone.dark2.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.2', its child: 'add' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'sigmoid.2', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.2', its child: 'mul.2' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv1.bn', its child: 'sigmoid.2' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.1.cv1.bn', its child: 'mul.2' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.1.cv1.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.1.cv1.conv', has one real child: 'backbone.dark2.1.m.0.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark2.1.cv1.conv', has one real child: 'backbone.dark2.1.cv3.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul.1', node module type: 'None', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'mul.1', has one real child: 'backbone.dark2.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[recursive_find_real_children] node_name: 'mul.1', has one real child: 'backbone.dark2.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid.1', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid.1', its child: 'mul.1' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.dark2.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.dark2.0.bn', its child: 'sigmoid.1' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.dark2.0.bn', its child: 'mul.1' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.dark2.0.bn', remove 2 duplicated real children.

[find_real_children] node_name: 'backbone.dark2.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.dark2.0.conv', has one real child: 'backbone.dark2.1.cv1.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_children] node_name: 'backbone.dark2.0.conv', has one real child: 'backbone.dark2.1.cv2.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'mul', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'mul', has one real child: 'backbone.dark2.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'sigmoid', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'sigmoid', its child: 'mul' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'backbone.stem.conv.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', children num: 2, recursive to find real children.
[recursive_find_real_children] node_name: 'backbone.stem.conv.bn', its child: 'sigmoid' with module type: 'None', needs recursive search.
[recursive_find_real_children] node_name: 'backbone.stem.conv.bn', its child: 'mul' with module type: 'None', needs recursive search.
[find_real_children] node_name: 'backbone.stem.conv.bn', remove 1 duplicated real children.

[find_real_children] node_name: 'backbone.stem.conv.conv', node module type: 'torch.nn.modules.conv.Conv2d', children num: 1, can directly find real children.
[find_real_children] node_name: 'backbone.stem.conv.conv', has one real child: 'backbone.dark2.0.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'cat', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'cat', has one real child: 'backbone.stem.conv.conv', its real child module type: 'torch.nn.modules.conv.Conv2d'.

[find_real_children] node_name: 'getitem.3', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'getitem.3', its child: 'cat' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'getitem.2', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'getitem.2', its child: 'cat' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'getitem.1', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'getitem.1', its child: 'cat' with module type: 'None', needs recursive search.

[find_real_children] node_name: 'getitem', node module type: 'None', children num: 1, recursive to find real children.
[recursive_find_real_children] node_name: 'getitem', its child: 'cat' with module type: 'None', needs recursive search.

[find_real_siblings] Find all siblings for each node according to the whole network graph built with Torch.FX
[find_real_siblings] node_name: 'getitem', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'getitem.1', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'getitem.2', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'getitem.3', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.stem.conv.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.stem.conv.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.1', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.1', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv1.conv', has one real sibling: 'backbone.dark2.1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark2.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.2', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.2', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.m.0.cv1.conv', has one real sibling: 'backbone.dark2.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark2.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.3', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.3', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.4', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.4', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv2.conv', has one real sibling: 'backbone.dark2.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark2.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.5', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.5', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.1', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark2.1.cv3.conv', has one real sibling: 'backbone.dark2.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark2.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.6', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.6', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.7', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.7', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv1.conv', has one real sibling: 'backbone.dark3.1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.8', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.8', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv1.conv', has one real sibling: 'backbone.dark3.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv1.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.9', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.9', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.10', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.10', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.1', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real sibling: 'backbone.dark3.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', remove 2 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.11', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.11', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.12', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.12', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.2', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', has one real sibling: 'backbone.dark3.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', remove 3 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.13', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.13', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.14', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.14', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.3', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv2.conv', has one real sibling: 'backbone.dark3.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.15', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.15', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.2', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', has one real sibling: 'backbone.dark3.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.conv', remove 3 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark3.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.16', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.16', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.0.conv', has one real sibling: 'conv3.for.upsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.0.conv', has one real sibling: 'conv3.for.upsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.17', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.17', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv1.conv', has one real sibling: 'backbone.dark4.1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.18', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.18', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv1.conv', has one real sibling: 'backbone.dark4.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv1.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.19', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.19', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.20', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.20', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.4', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real sibling: 'backbone.dark4.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', remove 2 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.21', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.21', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.22', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.22', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.5', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', has one real sibling: 'backbone.dark4.1.cv3.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', remove 3 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.23', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.23', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.24', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.24', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'add.6', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv2.conv', has one real sibling: 'backbone.dark4.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.25', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.25', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.3', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.0.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', has one real sibling: 'backbone.dark4.1.m.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.conv', remove 3 duplicated real siblings.
[find_real_siblings] node_name: 'backbone.dark4.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.26', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.26', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.0.conv', has one real sibling: 'conv3.for.upsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark5.0.conv', has one real sibling: 'conv3.for.upsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark5.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.27', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.27', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.28', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.28', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.m.0', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.m.1', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.m.2', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[find_real_siblings] node_name: 'cat.4', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.29', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.29', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv1.conv', has one real sibling: 'backbone.dark5.2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark5.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.30', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.30', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.31', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.31', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.32', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.32', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv2.conv', has one real sibling: 'backbone.dark5.2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'backbone.dark5.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.33', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.33', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.5', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'backbone.dark5.2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.34', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.34', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv.for.feat3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv.for.feat3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.35', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.35', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'upsample', node module type: 'torch.nn.modules.upsampling.Upsample', has no real siblings.
[find_real_siblings] node_name: 'cat.6', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', has one real sibling: 'conv3.for.upsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', has one real sibling: 'conv3.for.downsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', has one real sibling: 'conv3.for.downsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', has one real sibling: 'backbone.dark5.0.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', has one real sibling: 'conv3.for.upsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.36', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.36', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.37', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.37', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.38', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.38', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', has one real sibling: 'conv3.for.upsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', has one real sibling: 'conv3.for.downsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', has one real sibling: 'conv3.for.downsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', has one real sibling: 'backbone.dark5.0.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', has one real sibling: 'conv3.for.upsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.39', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.39', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.7', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.40', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.40', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv.for.feat2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv.for.feat2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.41', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.41', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'upsample.1', node module type: 'torch.nn.modules.upsampling.Upsample', has no real siblings.
[find_real_siblings] node_name: 'cat.8', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', has one real sibling: 'conv3.for.upsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', has one real sibling: 'conv3.for.downsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', has one real sibling: 'conv3.for.downsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', has one real sibling: 'backbone.dark4.0.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', has one real sibling: 'conv3.for.upsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.42', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.42', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.43', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.43', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.44', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.44', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', has one real sibling: 'conv3.for.upsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', has one real sibling: 'conv3.for.downsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', has one real sibling: 'conv3.for.downsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', has one real sibling: 'backbone.dark4.0.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', has one real sibling: 'conv3.for.upsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.45', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.45', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.9', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.upsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.46', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.46', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'down.sample1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'down.sample1.conv', has one real sibling: 'yolo.head.p3', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'down.sample1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.47', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.47', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.10', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', has one real sibling: 'conv3.for.downsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', has one real sibling: 'conv3.for.upsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', has one real sibling: 'conv3.for.upsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', has one real sibling: 'conv3.for.downsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.48', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.48', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.49', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.49', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.50', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.50', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', has one real sibling: 'conv3.for.downsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', has one real sibling: 'conv3.for.upsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', has one real sibling: 'conv3.for.upsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', has one real sibling: 'conv3.for.downsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.51', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.51', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.11', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.52', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.52', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'down.sample2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'down.sample2.conv', has one real sibling: 'yolo.head.p4', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'down.sample2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.53', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.53', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.12', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', has one real sibling: 'conv3.for.downsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', has one real sibling: 'conv3.for.upsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', has one real sibling: 'conv3.for.upsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', has one real sibling: 'conv3.for.downsample2.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.54', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.54', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.55', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.55', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.56', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.56', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', has one real sibling: 'conv3.for.downsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', has one real sibling: 'conv3.for.upsample1.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', has one real sibling: 'conv3.for.upsample1.cv2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', has one real sibling: 'conv3.for.downsample2.cv1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.conv', remove 1 duplicated real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.57', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.57', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'cat.13', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'conv3.for.downsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[find_real_siblings] node_name: 'sigmoid.58', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'mul.58', node module type: 'None', has no real siblings.
[find_real_siblings] node_name: 'yolo.head.p3', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'yolo.head.p3', has one real sibling: 'down.sample1.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'yolo.head.p4', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.
[find_real_siblings] node_name: 'yolo.head.p4', has one real sibling: 'down.sample2.conv', its real sibling module type: 'torch.nn.modules.conv.Conv2d'.
[find_real_siblings] node_name: 'yolo.head.p5', node module type: 'torch.nn.modules.conv.Conv2d', may have real siblings.

[extract_all_unique_siblings] Extract all unique siblings for the whole network graph built with Torch.FX
[extract_all_unique_siblings] node_name: 'getitem', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'getitem.1', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'getitem.2', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'getitem.3', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.stem.conv.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.stem.conv.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.1', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.1', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark2.1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.2', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.2', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark2.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.3', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.3', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.4', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.4', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark2.1.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.5', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.5', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.1', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark2.1.m.0.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark2.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.6', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.6', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.7', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.7', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark3.1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.8', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.8', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark3.1.m.1.cv1.conv', 'backbone.dark3.1.m.2.cv1.conv', 'backbone.dark3.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.9', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.9', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.10', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.10', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.1', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark3.1.m.0.cv1.conv', 'backbone.dark3.1.m.2.cv1.conv', 'backbone.dark3.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.11', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.11', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.12', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.12', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.2', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark3.1.m.0.cv1.conv', 'backbone.dark3.1.m.1.cv1.conv', 'backbone.dark3.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.13', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.13', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.14', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.14', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.3', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark3.1.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.15', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.15', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.2', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark3.1.m.0.cv1.conv', 'backbone.dark3.1.m.1.cv1.conv', 'backbone.dark3.1.m.2.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark3.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.16', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.16', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 2 real siblings: '['conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.17', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.17', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark4.1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.18', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.18', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark4.1.m.1.cv1.conv', 'backbone.dark4.1.m.2.cv1.conv', 'backbone.dark4.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.19', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.19', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.20', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.20', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.4', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark4.1.m.0.cv1.conv', 'backbone.dark4.1.m.2.cv1.conv', 'backbone.dark4.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.21', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.21', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.22', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.22', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.5', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark4.1.m.0.cv1.conv', 'backbone.dark4.1.m.1.cv1.conv', 'backbone.dark4.1.cv3.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.23', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.23', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.m.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.24', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.24', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'add.6', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark4.1.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.25', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.25', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.3', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['backbone.dark4.1.m.0.cv1.conv', 'backbone.dark4.1.m.1.cv1.conv', 'backbone.dark4.1.m.2.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark4.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.26', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.26', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 2 real siblings: '['conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark5.0.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.27', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.27', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.28', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.28', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.m.0', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.m.1', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.m.2', node module type: 'torch.nn.modules.pooling.MaxPool2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.4', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.29', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.29', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark5.2.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.30', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.30', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.31', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.31', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.32', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.32', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['backbone.dark5.2.cv1.conv']'.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.33', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.33', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.5', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'backbone.dark5.2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.34', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.34', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv.for.feat3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv.for.feat3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.35', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.35', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'upsample', node module type: 'torch.nn.modules.upsampling.Upsample', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.6', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 4 real siblings: '['conv3.for.upsample1.cv2.conv', 'conv3.for.downsample2.cv1.conv', 'conv3.for.downsample2.cv2.conv', 'backbone.dark5.0.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.36', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.36', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.37', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.37', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.38', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.38', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 4 real siblings: '['conv3.for.upsample1.cv1.conv', 'conv3.for.downsample2.cv1.conv', 'conv3.for.downsample2.cv2.conv', 'backbone.dark5.0.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.39', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.39', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.7', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.40', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.40', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv.for.feat2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv.for.feat2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.41', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.41', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'upsample.1', node module type: 'torch.nn.modules.upsampling.Upsample', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.8', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 4 real siblings: '['conv3.for.upsample2.cv2.conv', 'conv3.for.downsample1.cv1.conv', 'conv3.for.downsample1.cv2.conv', 'backbone.dark4.0.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.42', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.42', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.43', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.43', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.44', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.44', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 4 real siblings: '['conv3.for.upsample2.cv1.conv', 'conv3.for.downsample1.cv1.conv', 'conv3.for.downsample1.cv2.conv', 'backbone.dark4.0.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.45', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.45', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.9', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.upsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.46', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.46', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'down.sample1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['yolo.head.p3']'.
[extract_all_unique_siblings] node_name: 'down.sample1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.47', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.47', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.10', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['conv3.for.downsample1.cv2.conv', 'conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.48', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.48', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.49', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.49', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.50', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.50', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['conv3.for.downsample1.cv1.conv', 'conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.51', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.51', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.11', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.52', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.52', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'down.sample2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['yolo.head.p4']'.
[extract_all_unique_siblings] node_name: 'down.sample2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.53', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.53', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.12', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['conv3.for.downsample2.cv2.conv', 'conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.54', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.54', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.55', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.55', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.56', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.56', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', has 3 real siblings: '['conv3.for.downsample2.cv1.conv', 'conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']'.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.57', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.57', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'cat.13', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'conv3.for.downsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', has no real siblings.
[extract_all_unique_siblings] node_name: 'sigmoid.58', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'mul.58', node module type: 'None', has no real siblings.
[extract_all_unique_siblings] node_name: 'yolo.head.p3', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['down.sample1.conv']'.
[extract_all_unique_siblings] node_name: 'yolo.head.p4', node module type: 'torch.nn.modules.conv.Conv2d', has 1 real siblings: '['down.sample2.conv']'.
[extract_all_unique_siblings] node_name: 'yolo.head.p5', node module type: 'torch.nn.modules.conv.Conv2d', has no real siblings.

[init_permutation_flag] Init the permutation flag for each node according to the whole network graph built with Torch.FX

[init_permutation_flag] Post-processing Step No.1.
[init_permutation_flag] node_name: 'backbone.dark4.0.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'backbone.dark4.0.conv', change its original permutation: 'None' to new permutation: 'C'.
[init_permutation_flag] node_name: 'backbone.dark5.0.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'backbone.dark5.0.conv', change its original permutation: 'None' to new permutation: 'C'.
[init_permutation_flag] node_name: 'conv3.for.upsample1.cv1.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.upsample1.cv1.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.upsample1.cv2.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.upsample1.cv2.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv1.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv1.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv2.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv2.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv1.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv1.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv2.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv2.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample2.cv1.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.downsample2.cv1.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample2.cv2.conv', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'conv3.for.downsample2.cv2.conv', its original permutation: 'KC' already includes C dim, no need to do No.1 post-processing change.
[init_permutation_flag] node_name: 'yolo.head.p3', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'yolo.head.p3', change its original permutation: 'None' to new permutation: 'C'.
[init_permutation_flag] node_name: 'yolo.head.p4', one of its real siblings need do offline permutation in C dim.
[init_permutation_flag] node_name: 'yolo.head.p4', change its original permutation: 'None' to new permutation: 'C'.

[init_permutation_flag] Post-processing Step No.2.
[init_permutation_flag] node_name: 'backbone.dark3.1.cv3.conv', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'backbone.dark3.1.cv3.conv', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'backbone.dark3.1.cv3.bn', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'backbone.dark3.1.cv3.bn', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'backbone.dark4.1.cv3.conv', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'backbone.dark4.1.cv3.conv', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'backbone.dark4.1.cv3.bn', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'backbone.dark4.1.cv3.bn', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv3.conv', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv3.conv', its original permutation: 'KC' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv3.bn', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'conv3.for.upsample2.cv3.bn', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv3.conv', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv3.conv', its original permutation: 'KC' already includes K dim, no need to do No.2 post-processing change.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv3.bn', one of its real children has changed permutation due to its siblings.
[init_permutation_flag] node_name: 'conv3.for.downsample1.cv3.bn', its original permutation: 'K' already includes K dim, no need to do No.2 post-processing change.

[search_for_good_permutation] Search for the good permutation sequence for each node according to the whole network graph built with Torch.FX

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.stem.conv.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.stem.conv.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.stem.conv.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark2.0.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.0.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.0.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['backbone.dark2.1.cv1.conv', 'backbone.dark2.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['backbone.dark2.1.m.0.cv1.conv', 'backbone.dark2.1.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.1.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.1.m.0.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.1.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.1.cv3.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark2.1.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark2.1.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark2.1.m.0.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark3.0.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.0.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.0.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['backbone.dark3.1.cv1.conv', 'backbone.dark3.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 4 real siblings: '['backbone.dark3.1.m.0.cv1.conv', 'backbone.dark3.1.m.1.cv1.conv', 'backbone.dark3.1.m.2.cv1.conv', 'backbone.dark3.1.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.0.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.2.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.cv3.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark3.1.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.0.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark3.1.m.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark3.1.m.2.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark3.1.m.2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark3.1.m.2.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 3 real siblings: '['backbone.dark4.0.conv', 'conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.0.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.0.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.cv1.conv', with its weight shape: 'torch.Size([64, 256])', the matrix_group shape: 'torch.Size([64, 256])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.cv2.conv', with its weight shape: 'torch.Size([64, 256])', the matrix_group shape: 'torch.Size([128, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.
Found 8 gpus

[search_for_good_permutation] Original element abs sum: 389.37888664428647, Pruned element abs sum: 389.3787536621094, Diff ratio: 3.415238515842518e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['backbone.dark4.1.cv1.conv', 'backbone.dark4.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 4 real siblings: '['backbone.dark4.1.m.0.cv1.conv', 'backbone.dark4.1.m.1.cv1.conv', 'backbone.dark4.1.m.2.cv1.conv', 'backbone.dark4.1.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.0.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.2.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.cv3.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark4.1.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.0.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark4.1.m.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark4.1.m.2.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark4.1.m.2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark4.1.m.2.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 3 real siblings: '['backbone.dark5.0.conv', 'conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.0.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.0.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.cv1.conv', with its weight shape: 'torch.Size([128, 512])', the matrix_group shape: 'torch.Size([128, 512])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.cv2.conv', with its weight shape: 'torch.Size([128, 512])', the matrix_group shape: 'torch.Size([256, 512])'.

[search_for_good_permutation] init the all-zero list with length '512' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1552.5183216296136, Pruned element abs sum: 1552.521728515625, Diff ratio: 2.1944256398765136e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark5.1.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.1.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark5.1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.1.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['backbone.dark5.2.cv1.conv', 'backbone.dark5.2.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.2.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.2.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark5.2.m.0.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.2.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.2.m.0.cv1.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark5.2.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.2.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.2.m.0.cv2.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['backbone.dark5.2.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'backbone.dark5.2.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'backbone.dark5.2.cv3.conv' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv.for.feat3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv.for.feat3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv.for.feat3.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv.for.feat3.conv', with its weight shape: 'torch.Size([256, 512])', the matrix_group shape: 'torch.Size([256, 512])'.

[search_for_good_permutation] init the all-zero list with length '512' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1587.364267670433, Pruned element abs sum: 1587.3626708984375, Diff ratio: 1.0059266345212347e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample1.m.0.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.m.0.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.m.0.cv1.conv', with its weight shape: 'torch.Size([128, 128])', the matrix_group shape: 'torch.Size([128, 128])'.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 196.93249322581687, Pruned element abs sum: 196.93251037597656, Diff ratio: 8.708649045907398e-08
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample1.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.m.0.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.m.0.cv2.conv', with its weight shape: 'torch.Size([1152, 128])', the matrix_group shape: 'torch.Size([1152, 128])'.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1766.4284649877227, Pruned element abs sum: 1766.430908203125, Diff ratio: 1.383138604667941e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample1.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.cv3.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.cv3.conv', with its weight shape: 'torch.Size([256, 256])', the matrix_group shape: 'torch.Size([256, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 778.0946328712744, Pruned element abs sum: 778.0946655273438, Diff ratio: 4.196927725718216e-08
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv.for.feat2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv.for.feat2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv.for.feat2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv.for.feat2.conv', with its weight shape: 'torch.Size([128, 256])', the matrix_group shape: 'torch.Size([128, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 400.80039433727507, Pruned element abs sum: 400.8004150390625, Diff ratio: 5.1651115435524506e-08
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample2.m.0.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.m.0.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.m.0.cv1.conv', with its weight shape: 'torch.Size([64, 64])', the matrix_group shape: 'torch.Size([64, 64])'.

[search_for_good_permutation] init the all-zero list with length '64' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 51.57472725468688, Pruned element abs sum: 51.574729919433594, Diff ratio: 5.1667684124812854e-08
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample2.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.m.0.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.m.0.cv2.conv', with its weight shape: 'torch.Size([576, 64])', the matrix_group shape: 'torch.Size([576, 64])'.

[search_for_good_permutation] init the all-zero list with length '64' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 440.9218024215079, Pruned element abs sum: 440.9216613769531, Diff ratio: 3.1988564410211047e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.upsample2.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.cv3.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.cv3.conv', with its weight shape: 'torch.Size([128, 128])', the matrix_group shape: 'torch.Size([128, 128])'.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 197.89705051708734, Pruned element abs sum: 197.89710998535156, Diff ratio: 3.005010133828933e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['down.sample1.conv', 'yolo.head.p3']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'down.sample1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'down.sample1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'down.sample1.conv', with its weight shape: 'torch.Size([1152, 128])', the matrix_group shape: 'torch.Size([1152, 128])'.
[search_for_good_permutation] try to merge the weight for node: 'yolo.head.p3', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'yolo.head.p3' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1765.8515475734603, Pruned element abs sum: 1765.8502197265625, Diff ratio: 7.519583962709952e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 4 real siblings: '['conv3.for.downsample1.cv1.conv', 'conv3.for.downsample1.cv2.conv', 'conv3.for.upsample2.cv1.conv', 'conv3.for.upsample2.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample1.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample1.cv1.conv', with its weight shape: 'torch.Size([128, 256])', the matrix_group shape: 'torch.Size([128, 256])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample1.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample1.cv2.conv', with its weight shape: 'torch.Size([128, 256])', the matrix_group shape: 'torch.Size([256, 256])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.cv1.conv', with its weight shape: 'torch.Size([64, 256])', the matrix_group shape: 'torch.Size([320, 256])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample2.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample2.cv2.conv', with its weight shape: 'torch.Size([64, 256])', the matrix_group shape: 'torch.Size([384, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1168.6997134346148, Pruned element abs sum: 1168.6995849609375, Diff ratio: 1.0992873171233815e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample1.m.0.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample1.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample1.m.0.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample1.m.0.cv1.conv', with its weight shape: 'torch.Size([128, 128])', the matrix_group shape: 'torch.Size([128, 128])'.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 199.137887363584, Pruned element abs sum: 199.13796997070312, Diff ratio: 4.148237194086575e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample1.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample1.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample1.m.0.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample1.m.0.cv2.conv', with its weight shape: 'torch.Size([1152, 128])', the matrix_group shape: 'torch.Size([1152, 128])'.

[search_for_good_permutation] init the all-zero list with length '128' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 1764.8161627846712, Pruned element abs sum: 1764.8154296875, Diff ratio: 4.15395771320083e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample1.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample1.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample1.cv3.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample1.cv3.conv', with its weight shape: 'torch.Size([256, 256])', the matrix_group shape: 'torch.Size([256, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 776.0805173553526, Pruned element abs sum: 776.081787109375, Diff ratio: 1.6361111946048913e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 2 real siblings: '['down.sample2.conv', 'yolo.head.p4']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'down.sample2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'down.sample2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'down.sample2.conv', with its weight shape: 'torch.Size([2304, 256])', the matrix_group shape: 'torch.Size([2304, 256])'.
[search_for_good_permutation] try to merge the weight for node: 'yolo.head.p4', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'yolo.head.p4' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 7042.739463222097, Pruned element abs sum: 7042.7490234375, Diff ratio: 1.3574569176171112e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 4 real siblings: '['conv3.for.downsample2.cv1.conv', 'conv3.for.downsample2.cv2.conv', 'conv3.for.upsample1.cv1.conv', 'conv3.for.upsample1.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d', 'torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample2.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample2.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample2.cv1.conv', with its weight shape: 'torch.Size([256, 512])', the matrix_group shape: 'torch.Size([256, 512])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample2.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample2.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample2.cv2.conv', with its weight shape: 'torch.Size([256, 512])', the matrix_group shape: 'torch.Size([512, 512])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.cv1.conv', with its weight shape: 'torch.Size([128, 512])', the matrix_group shape: 'torch.Size([640, 512])'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.upsample1.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.upsample1.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.upsample1.cv2.conv', with its weight shape: 'torch.Size([128, 512])', the matrix_group shape: 'torch.Size([768, 512])'.

[search_for_good_permutation] init the all-zero list with length '512' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 4658.267405433173, Pruned element abs sum: 4658.2666015625, Diff ratio: 1.7256859747641986e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample2.m.0.cv1.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample2.m.0.cv1.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample2.m.0.cv1.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample2.m.0.cv1.conv', with its weight shape: 'torch.Size([256, 256])', the matrix_group shape: 'torch.Size([256, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 794.4301128976513, Pruned element abs sum: 794.4302978515625, Diff ratio: 2.3281331891531185e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample2.m.0.cv2.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample2.m.0.cv2.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample2.m.0.cv2.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample2.m.0.cv2.conv', with its weight shape: 'torch.Size([2304, 256])', the matrix_group shape: 'torch.Size([2304, 256])'.

[search_for_good_permutation] init the all-zero list with length '256' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 7047.150317489184, Pruned element abs sum: 7047.1572265625, Diff ratio: 9.804066898876204e-07
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['conv3.for.downsample2.cv3.conv']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'conv3.for.downsample2.cv3.conv', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] find the node: 'conv3.for.downsample2.cv3.conv' in cls.__sparse_parameters, module type match: 'True'.
[search_for_good_permutation] have merged the weight for node: 'conv3.for.downsample2.cv3.conv', with its weight shape: 'torch.Size([512, 512])', the matrix_group shape: 'torch.Size([512, 512])'.

[search_for_good_permutation] init the all-zero list with length '512' for permutation search sequence of this unique_siblings_group.

[search_for_good_permutation] Original element abs sum: 3111.3399982169212, Pruned element abs sum: 3111.333251953125, Diff ratio: 2.1682824121108578e-06
[search_for_good_permutation] Original element abs sum is almost same as the pruned element abs sum, further permutation search will not help, skipping!
[search_for_good_permutation] Change the all-zero permutation search sequence to a sequential permutation search sequence.

[search_for_good_permutation] this unique_siblings_group has 1 real siblings: '['yolo.head.p5']', with module type: '['torch.nn.modules.conv.Conv2d']'.
[search_for_good_permutation] try to merge the weight for node: 'yolo.head.p5', with module type: 'torch.nn.modules.conv.Conv2d'.
[search_for_good_permutation] cannot find the node: 'yolo.head.p5' in cls.__sparse_parameters, no need to merge its weight for permutation.

[search_for_good_permutation] init the all-zero list with length '0' for permutation search sequence of this unique_siblings_group.
[search_for_good_permutation] no need to search the permutation_sequence for empty matrix_group.

[build_offline_permutation_graph] Take 0.3442 seconds to finish search_for_good_permutation function.

[compute_sparse_masks] build offline permutation graph on none-distributed model.
[compute_sparse_masks] Take 0.4136 seconds to finish build_offline_permutation_graph function.

[apply_offline_permutation] Offline permutation for each node according to the the whole network graph built with Torch.FX

[apply_offline_permutation] node_name: 'backbone.dark3.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'backbone.dark3.1.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'backbone.dark3.1.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'backbone.dark3.1.cv3.conv' with shape: 'torch.Size([128, 128, 1, 1])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'backbone.dark3.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'backbone.dark3.1.cv3.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'backbone.dark4.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in C dim.
[apply_offline_permutation][warning] node_name: 'backbone.dark4.0.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.

[apply_offline_permutation] node_name: 'backbone.dark4.1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'backbone.dark4.1.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'backbone.dark4.1.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'backbone.dark4.1.cv3.conv' with shape: 'torch.Size([256, 256, 1, 1])', cannot match the size of permutation sequence with len: '512', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'backbone.dark4.1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'backbone.dark4.1.cv3.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'backbone.dark5.0.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in C dim.
[apply_offline_permutation][warning] node_name: 'backbone.dark5.0.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.

[apply_offline_permutation] node_name: 'backbone.dark5.2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'backbone.dark5.2.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'backbone.dark5.2.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'backbone.dark5.2.cv3.conv' with shape: 'torch.Size([512, 512, 1, 1])', can match the size of permutation sequence with len: '512', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'backbone.dark5.2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'backbone.dark5.2.cv3.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'backbone.dark5.2.cv3.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'backbone.dark5.2.cv3.bn' with shape: 'torch.Size([512])', can match the size of permutation sequence with len: '512', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'backbone.dark5.2.cv3.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'backbone.dark5.2.cv3.bn' with shape: 'torch.Size([512])', can match the size of permutation sequence with len: '512', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'backbone.dark5.2.cv3.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'backbone.dark5.2.cv3.bn' with shape: 'torch.Size([512])', can match the size of permutation sequence with len: '512', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'backbone.dark5.2.cv3.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'backbone.dark5.2.cv3.bn' with shape: 'torch.Size([512])', can match the size of permutation sequence with len: '512', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv.for.feat3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv.for.feat3.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv.for.feat3.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv.for.feat3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv.for.feat3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv.for.feat3.conv' with shape: 'torch.Size([256, 512, 1, 1])', cannot match the size of permutation sequence with len: '512', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv.for.feat3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv.for.feat3.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample1.cv1.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv1.conv' with shape: 'torch.Size([128, 512, 1, 1])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.upsample1.m.0.cv1.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.upsample1.m.0.cv1.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.m.0.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.m.0.cv1.conv' with shape: 'torch.Size([128, 128, 1, 1])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.m.0.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.upsample1.m.0.cv2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.upsample1.m.0.cv2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.m.0.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.m.0.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.upsample1.m.0.cv2.conv' with shape: 'torch.Size([128, 128, 3, 3])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample1.m.0.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample1.cv2.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.upsample1.cv2.conv' with shape: 'torch.Size([128, 512, 1, 1])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample1.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample1.cv3.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv3.conv' with shape: 'torch.Size([256, 256, 1, 1])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample1.cv3.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv3.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv3.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv3.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample1.cv3.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv.for.feat2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv.for.feat2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv.for.feat2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv.for.feat2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv.for.feat2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv.for.feat2.conv' with shape: 'torch.Size([128, 256, 1, 1])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv.for.feat2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv.for.feat2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample2.cv1.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv1.conv' with shape: 'torch.Size([64, 256, 1, 1])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.upsample2.m.0.cv1.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.upsample2.m.0.cv1.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.m.0.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.m.0.cv1.conv' with shape: 'torch.Size([64, 64, 1, 1])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.m.0.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.m.0.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.m.0.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.m.0.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.m.0.cv1.bn' with shape: 'torch.Size([64])', can match the size of permutation sequence with len: '64', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.upsample2.m.0.cv2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.upsample2.m.0.cv2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.m.0.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.m.0.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.upsample2.m.0.cv2.conv' with shape: 'torch.Size([64, 64, 3, 3])', cannot match the size of permutation sequence with len: '128', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample2.m.0.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample2.cv2.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.upsample2.cv2.conv' with shape: 'torch.Size([64, 256, 1, 1])', cannot match the size of permutation sequence with len: '128', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample2.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.upsample2.cv3.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv3.conv' with shape: 'torch.Size([128, 128, 1, 1])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.upsample2.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.upsample2.cv3.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv3.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv3.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv3.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv3.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv3.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv3.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.upsample2.cv3.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.upsample2.cv3.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'down.sample1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'down.sample1.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'down.sample1.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'down.sample1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'down.sample1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'down.sample1.conv' with shape: 'torch.Size([128, 128, 3, 3])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'down.sample1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'down.sample1.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample1.cv1.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv1.conv' with shape: 'torch.Size([128, 256, 1, 1])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.downsample1.m.0.cv1.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.downsample1.m.0.cv1.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.m.0.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.m.0.cv1.conv' with shape: 'torch.Size([128, 128, 1, 1])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.m.0.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.m.0.cv1.bn' with shape: 'torch.Size([128])', can match the size of permutation sequence with len: '128', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.downsample1.m.0.cv2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.downsample1.m.0.cv2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.m.0.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.m.0.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.downsample1.m.0.cv2.conv' with shape: 'torch.Size([128, 128, 3, 3])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample1.m.0.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample1.cv2.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.downsample1.cv2.conv' with shape: 'torch.Size([128, 256, 1, 1])', cannot match the size of permutation sequence with len: '256', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample1.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample1.cv3.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.cv3.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv3.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv3.conv' with shape: 'torch.Size([256, 256, 1, 1])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample1.cv3.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample1.cv3.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv3.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv3.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv3.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample1.cv3.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample1.cv3.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'down.sample2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'down.sample2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'down.sample2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'down.sample2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'down.sample2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'down.sample2.conv' with shape: 'torch.Size([256, 256, 3, 3])', cannot match the size of permutation sequence with len: '512', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'down.sample2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'down.sample2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample2.cv1.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.cv1.conv' with shape: 'torch.Size([256, 512, 1, 1])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.m.0.cv1.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.downsample2.m.0.cv1.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.downsample2.m.0.cv1.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.m.0.cv1.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv1.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.m.0.cv1.conv' with shape: 'torch.Size([256, 256, 1, 1])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.m.0.cv1.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.m.0.cv1.bn' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv1.bn' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.m.0.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv1.bn' with 'bias' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.m.0.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv1.bn' with 'running_mean' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.m.0.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv1.bn' with 'running_var' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim] the node: 'conv3.for.downsample2.m.0.cv1.bn' with shape: 'torch.Size([256])', can match the size of permutation sequence with len: '256', succeed to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.m.0.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_permutation_in_C_dim] Permutation for node: 'conv3.for.downsample2.m.0.cv2.conv' in C dim
[apply_permutation_in_C_dim] find the node: 'conv3.for.downsample2.m.0.cv2.conv' in cls.__sparse_parameters, succeed to apply permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.m.0.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.m.0.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.downsample2.m.0.cv2.conv' with shape: 'torch.Size([256, 256, 3, 3])', cannot match the size of permutation sequence with len: '512', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.m.0.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample2.m.0.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.cv2.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in K and C dims.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample2.cv2.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.
[apply_permutation_in_K_dim] Permutation for node: 'conv3.for.downsample2.cv2.conv' in K dim
[apply_permutation_in_K_dim] find the node: 'conv3.for.downsample2.cv2.conv' with 'weight' in cls.__all_parameters, may succeed to apply permutation in K dim.
[apply_permutation_in_K_dim][warning] the node: 'conv3.for.downsample2.cv2.conv' with shape: 'torch.Size([256, 512, 1, 1])', cannot match the size of permutation sequence with len: '512', fail to apply permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.cv2.bn', node module type: 'torch.nn.modules.batchnorm.BatchNorm2d', need to do offline permutation in K dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample2.cv2.bn', its real parents have trouble in permutation in K dim, so skip the offline permutation in K dim.

[apply_offline_permutation] node_name: 'conv3.for.downsample2.cv3.conv', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in C dim.
[apply_offline_permutation][warning] node_name: 'conv3.for.downsample2.cv3.conv', its real parents have trouble in permutation in K dim, so skip the offline permutation in C dim.

[apply_offline_permutation] node_name: 'yolo.head.p3', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in C dim.
[apply_permutation_in_C_dim] Permutation for node: 'yolo.head.p3' in C dim

[apply_offline_permutation] node_name: 'yolo.head.p4', node module type: 'torch.nn.modules.conv.Conv2d', need to do offline permutation in C dim.
[apply_permutation_in_C_dim] Permutation for node: 'yolo.head.p4' in C dim

[compute_sparse_masks] apply offline permutation on none-distributed model.
[compute_sparse_masks] Take 0.1803 seconds to finish apply_offline_permutation function.

[ASP] Enabled 50.00% sparsity for conv_for_feat3.conv::weight of size=torch.Size([256, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample1.cv1.conv::weight of size=torch.Size([128, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample1.cv2.conv::weight of size=torch.Size([128, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample1.cv3.conv::weight of size=torch.Size([256, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample1.m.0.cv1.conv::weight of size=torch.Size([128, 128, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample1.m.0.cv2.conv::weight of size=torch.Size([128, 128, 3, 3]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv_for_feat2.conv::weight of size=torch.Size([128, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample2.cv1.conv::weight of size=torch.Size([64, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample2.cv2.conv::weight of size=torch.Size([64, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample2.cv3.conv::weight of size=torch.Size([128, 128, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample2.m.0.cv1.conv::weight of size=torch.Size([64, 64, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_upsample2.m.0.cv2.conv::weight of size=torch.Size([64, 64, 3, 3]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for down_sample1.conv::weight of size=torch.Size([128, 128, 3, 3]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample1.cv1.conv::weight of size=torch.Size([128, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample1.cv2.conv::weight of size=torch.Size([128, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample1.cv3.conv::weight of size=torch.Size([256, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample1.m.0.cv1.conv::weight of size=torch.Size([128, 128, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample1.m.0.cv2.conv::weight of size=torch.Size([128, 128, 3, 3]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for down_sample2.conv::weight of size=torch.Size([256, 256, 3, 3]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample2.cv1.conv::weight of size=torch.Size([256, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample2.cv2.conv::weight of size=torch.Size([256, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample2.cv3.conv::weight of size=torch.Size([512, 512, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample2.m.0.cv1.conv::weight of size=torch.Size([256, 256, 1, 1]) and type=torch.float32
[ASP] Enabled 50.00% sparsity for conv3_for_downsample2.m.0.cv2.conv::weight of size=torch.Size([256, 256, 3, 3]) and type=torch.float32
Start Train
